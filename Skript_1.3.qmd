---
title: "Die Logik von Markdown und Quarto"
author: "Katharina Maubach & Patrick Zerrer"
toc: true
number-sections: true
highlight-style: pygments
format:
  html:
    code-fold: false
    code-line-numbers: true
execute: 
  echo: fenced
---

![Artwork by @allison_horst](Bilder/R%20Markdown%20Grafik.png)

## R Markdown und Quarto

In diesem Kurs verwenden wir R Markdown bzw. R Quarto Dokumente. Diese haben den Vorteil, dass wir innerhalb eines Dokumentes Codeteile (sogenannte *Code Chunks*) und Text kombinieren kÃ¶nnen. Dies erlaubt die Dokumentation und Reproduzierbarkeit statistischer Auswertungen.

Bei [Quarto](https://quarto.org/) handelt es sich im Prinzip um die neuere Variante von RMarkdown Dokumenten. Diese beinhalten alle FunktionalitÃ¤ten von Markdown-Dokumenten (sind genauso aufgebaut und lassen sich normal rendern), aber bieten zusÃ¤tzlich die MÃ¶glichkeit weitere Programmiersprachen (wie Python, Julia und Javascript) und interaktive Elemente (Widgets und Shiny-Anwendungen). Markdown-Dokumente weisen die Endung `.rmd` auf wohingegen Quarto-Dokumente den Endung `.qmd` haben. Beide Dokumenttypen kÃ¶nnen fÃ¼r unseren Kurszweck gleichwertig genutzt werden. Lediglich bei der Arbeit mit interaktiven, multimedialen oder mehrsprachigen Dokumenten ist Quarto besser geeignet als Markdown.

## Installation der Programme

Markdown kann innerhalb von R mit dem Befehl `install.packages("Rmarkdown")` installiert und anschlieÃŸend geladen werden. Da es sich bei Quarto nicht um ein Package, sondern ein eigenes Interface handelt, muss das Programm extern [heruntergeladen](https://quarto.org/docs/get-started/) und auf dem Rechner installiert werden.

## Bestehende Dokument laden

## Neue Dokumente anlegen

## Ãœbergreifende MenÃ¼punkte

![DokumentmenÃ¼leistet](Bilder/QuartomenÃ¼.jpg)

## Ãœberblick Ã¼ber die Dokumentkomponenten

Sowohl Markdown, als auch Quarto-Dokumente bestehen aus drei Bestandteilen: dem YAML-Header, Textbereichen und Codebereichen.

### YAML-Header

Innerhalb des YAML Headers, welcher jeweils von `---` umgeben ist, legen wir die Dokumentstruktur fest.

![YAML Header in einem Quarto Dokument](Bilder/YAMLHeader.jpg)

Dies beinhaltet beispielsweise den Titel des Dokumentes `title:`, die Autoren `author`, sowie Spezifikationen zur Dokumentstruktur, wie beispielsweise das Outputformat `format:` oder auch in Quarto Spezifikationen zum Umgang mit den Codechunks `output: echo = TRUE` auf Gesamtdokumentebene.

### Text

In Markdown und Quarto-Dokumenten kÃ¶nnen wir Text einbinden und diesen beliebig formatieren. Dazu kÃ¶nnen wir wahlweise die Source-Variante oder die Visual-Variante nutzen. In der Source-Variante variieren wir Text mittels Syntax. Typische Syntaxbefehle sind:

-   \**kursiv*\*: jeweils einen Stern vor und nach einem Wort um dieses kursiv zu schreiben
-   \*\***fett**\*\*: jeweils zwei Sterne vor und nach einem Wort um dieses fett zu schreiben
-   #: Rauten fÃ¼r Ãœberschriften, wobei eine Raute die erste Ãœberschrift signalisiert, zwei Rauten die zweite usw.
-   \![Bildunterschrift\](Link des Bildes): um Bilder einzufÃ¼gen
-   \[Linktext\](url): Um Links einzufÃ¼gen

MÃ¶chten wir Ã¼brigens die oben genutzten Symbole im Text nutzen, so kÃ¶nnen wir mit einem Â vor dem jeweiligen Symbol die Formatierung umgehen.

Wahlweise kÃ¶nnen wir auch den Visual-Modus nutzen, indem wir oben in der Dokumentleiste von `Source`auf `Visual` umstellen. In diesem Modus erhalten wir ein Word-Ã¤hnliches Interface und kÃ¶nnen Formatoptionen durch Klicken auf die jeweilige Formatierung umsetzen:

![Formatierungsoptionen im Visual Modus](Bilder/visualmode.jpg)


### Code Chunks

```{r}

# Dies ist ein Code Chunk

```

```{r, echo = T}

# Dies ist ein Code Chunk

```

Wahlweise kÃ¶nnen wir diese Optionen auch fÃ¼r das Gesamtdokument im YAML-Header festlegen. DafÃ¼r nutzen wir den Zusatz `execute:` und geben anschlieÃŸend alle unsere Dokumentoptionen (fÃ¼r einen Ãœberblick siehe [hier](https://quarto.org/docs/computations/execution-options.html)) an.

![Codeoptionen im Quarto Header](Bilder/YAMLOptions.jpg)

*Achtung*: wir nutzen hier `:` statt `=` und schreiben `true` und `false` statt `TRUE`/`T` und `FALSE`/`F`.

## Literatur

::: callout-note
## WeiterfÃ¼hrende Literatur

> ðŸ“– Gehrau, V., Maubach, K., & Fujarski, S. (2022). Einfache Datenauswertung mit R. [Link](https://link.springer.com/book/10.1007/978-3-658-34285-2)

> ðŸ“– Xie, Y., Allaire, J. J., & Grolemund, G. (2020). R markdown: The definitive guide. Chapman; Hall/CRC [Link](https://bookdown.org/yihui/rmarkdown)

> ðŸ“– Xie, Y., Dervieux, C., & Riederer, E. (2020). R markdown cookbook. Chapman and Hall/CRC [Link](https://bookdown.org/yihui/rmarkdown-cookbook/#ref-R-rmarkdown)

> ðŸ“– Allaire, J. J., Xie, Y., McPherson, J., Luraschi, J., Ushey, K., Atkins, A., Wickham, H., Cheng, J., Chang, W., & Iannone, R. (2020a). rmarkdown: Dynamic documents for r. [Link](https://github.com/rstudio/rmarkdown)
:::
