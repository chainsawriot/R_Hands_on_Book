<<<<<<< Updated upstream
<<<<<<< HEAD
stat_function(fun=dnorm, args=list(mean=log.mean, sd=log.sd), colour="red") +   # Einfügen der Normalcerteilung mit arithm. mittel
stat_function(fun=dnorm, args=list(mean=log.median, sd=log.sd), colour="blue") +  # Einfügen der NV mit Median
labs(x = "Einkommen", y = "Häufigkeit")
df.log.income <- data.frame(log.incomeh=tanh(log.income))
ggplot(df.log.income, aes(x = log.incomeh)) +
geom_histogram(aes(y =..density..),
breaks = seq(-0.3, 0.5, by = 0.001),
colour = "black",
fill = "gray") +
labs(x = "Einkommen", y = "Häufigkeit") +
geom_vline(xintercept = log.mean, color = "red", linetype = "dashed", linewidth = 1) +
geom_vline(xintercept = log.median, color = "blue", linetype = "dashed", linewidth = 1) +
stat_function(fun=dnorm, args=list(mean=log.mean, sd=log.sd), colour="red") +   # Einfügen der Normalcerteilung mit arithm. mittel
stat_function(fun=dnorm, args=list(mean=log.median, sd=log.sd), colour="blue") +  # Einfügen der NV mit Median
labs(x = "Einkommen", y = "Häufigkeit")
df.log.income <- data.frame(log.incomeh=tanh(log.income))
ggplot(df.log.income, aes(x = log.incomeh)) +
geom_histogram(aes(y =..density..),
breaks = seq(-0.3, 0.5, by = 0.001),
colour = "black",
fill = "gray") +
labs(x = "Einkommen", y = "Häufigkeit") +
#geom_vline(xintercept = log.mean, color = "red", linetype = "dashed", linewidth = 1) #+
#geom_vline(xintercept = log.median, color = "blue", linetype = "dashed", linewidth = 1) +
#stat_function(fun=dnorm, args=list(mean=log.mean, sd=log.sd), colour="red") +   # Einfügen der Normalcerteilung mit arithm. mittel
#stat_function(fun=dnorm, args=list(mean=log.median, sd=log.sd), colour="blue") +  # Einfügen der NV mit Median
labs(x = "Einkommen", y = "Häufigkeit")
df.log.income <- data.frame(log.incomeh=tanh(log.income))
ggplot(df.log.income, aes(x = log.incomeh)) +
geom_histogram(aes(y =..density..),
breaks = seq(-0, 10, by = 0.01),
colour = "black",
fill = "gray") +
labs(x = "Einkommen", y = "Häufigkeit") +
geom_vline(xintercept = log.mean, color = "red", linetype = "dashed", linewidth = 1) #+
geom_vline(xintercept = log.median, color = "blue", linetype = "dashed", linewidth = 1) +
stat_function(fun=dnorm, args=list(mean=log.mean, sd=log.sd), colour="red") +   # Einfügen der Normalcerteilung mit arithm. mittel
stat_function(fun=dnorm, args=list(mean=log.median, sd=log.sd), colour="blue") +  # Einfügen der NV mit Median
labs(x = "Einkommen", y = "Häufigkeit")
df.log.income <- data.frame(log.incomeh=log.income)
ggplot(df.log.income, aes(x = log.incomeh)) +
geom_histogram(aes(y =..density..),
breaks = seq(-0, 10, by = 0.01),
colour = "black",
fill = "gray") +
labs(x = "Einkommen", y = "Häufigkeit") +
geom_vline(xintercept = log.mean, color = "red", linetype = "dashed", linewidth = 1) #+
geom_vline(xintercept = log.median, color = "blue", linetype = "dashed", linewidth = 1) +
stat_function(fun=dnorm, args=list(mean=log.mean, sd=log.sd), colour="red") +   # Einfügen der Normalcerteilung mit arithm. mittel
stat_function(fun=dnorm, args=list(mean=log.median, sd=log.sd), colour="blue") +  # Einfügen der NV mit Median
labs(x = "Einkommen", y = "Häufigkeit")
df.log.income <- data.frame(log.incomeh=log.income)
ggplot(df.log.income, aes(x = log.incomeh)) +
geom_histogram(aes(y =..density..),
breaks = seq(-0, 10, by = 0.1),
colour = "black",
fill = "gray") +
labs(x = "Einkommen", y = "Häufigkeit") +
geom_vline(xintercept = log.mean, color = "red", linetype = "dashed", linewidth = 1) #+
geom_vline(xintercept = log.median, color = "blue", linetype = "dashed", linewidth = 1) +
stat_function(fun=dnorm, args=list(mean=log.mean, sd=log.sd), colour="red") +   # Einfügen der Normalcerteilung mit arithm. mittel
stat_function(fun=dnorm, args=list(mean=log.median, sd=log.sd), colour="blue") +  # Einfügen der NV mit Median
labs(x = "Einkommen", y = "Häufigkeit")
df.log.income <- data.frame(log.incomeh=log.income)
ggplot(df.log.income, aes(x = log.incomeh)) +
geom_histogram(aes(y =..density..),
breaks = seq(-0, 10, by = 0.1),
colour = "black",
fill = "gray") +
labs(x = "Einkommen", y = "Häufigkeit") +
geom_vline(xintercept = log.mean, color = "red", linetype = "dashed", linewidth = 1) +
geom_vline(xintercept = log.median, color = "blue", linetype = "dashed", linewidth = 1) +
stat_function(fun=dnorm, args=list(mean=log.mean, sd=log.sd), colour="red") +   # Einfügen der Normalcerteilung mit arithm. mittel
stat_function(fun=dnorm, args=list(mean=log.median, sd=log.sd), colour="blue") +  # Einfügen der NV mit Median
labs(x = "Einkommen", y = "Häufigkeit")
atan.func <- function(x, lamb, mean){
f <- lamb * atanh(x - mean)
return(f)
}
df.log.income <- data.frame(log.incomeh=atan.func(log.income))
atan.func <- function(x, lamb, mean){
f <- lamb * atanh(x - mean)
return(f)
}
df.log.income <- data.frame(log.incomeh=atan.func(log.income, 2, log.mean))
ggplot(df.log.income, aes(x = log.incomeh)) +
geom_histogram(aes(y =..density..),
breaks = seq(-0, 10, by = 0.1),
colour = "black",
fill = "gray") +
labs(x = "Einkommen", y = "Häufigkeit") +
geom_vline(xintercept = log.mean, color = "red", linetype = "dashed", linewidth = 1) +
geom_vline(xintercept = log.median, color = "blue", linetype = "dashed", linewidth = 1) +
stat_function(fun=dnorm, args=list(mean=log.mean, sd=log.sd), colour="red") +   # Einfügen der Normalcerteilung mit arithm. mittel
stat_function(fun=dnorm, args=list(mean=log.median, sd=log.sd), colour="blue") +  # Einfügen der NV mit Median
labs(x = "Einkommen", y = "Häufigkeit")
tan.func <- function(x, lamb, mean){
f <- lamb * tanh(-x - mean)
return(f)
}
df.log.income <- data.frame(log.incomeh=atan.func(log.income, 2, log.mean))
ggplot(df.log.income, aes(x = log.incomeh)) +
geom_histogram(aes(y =..density..),
breaks = seq(-0, 10, by = 0.1),
colour = "black",
fill = "gray") +
labs(x = "Einkommen", y = "Häufigkeit") +
geom_vline(xintercept = log.mean, color = "red", linetype = "dashed", linewidth = 1) +
geom_vline(xintercept = log.median, color = "blue", linetype = "dashed", linewidth = 1) +
stat_function(fun=dnorm, args=list(mean=log.mean, sd=log.sd), colour="red") +   # Einfügen der Normalcerteilung mit arithm. mittel
stat_function(fun=dnorm, args=list(mean=log.median, sd=log.sd), colour="blue") +  # Einfügen der NV mit Median
labs(x = "Einkommen", y = "Häufigkeit")
if(!require("pacman")) {install.packages("pacman");library(pacman)}
p_load(tidyverse, ggplot2, haven, dplyr)
theme_set(theme_classic())
daten = haven::read_dta("Datensatz/Allbus_2021.dta")
allbus_messniveau_bsp <- subset(daten, select=c("sex", "pt12", "di01a")) %>%
mutate(across(c("sex", "pt12", "di01a"), ~ as.numeric(.))) %>%
mutate(across(c("sex", "pt12", "di01a"), ~ ifelse(.%in% c(-7, -9, -11, -15, -42, -50 ), NA,.))) %>%
na.omit()
df_income <- data.frame(income=allbus_messniveau_bsp$di01a)
mittel <- mean(income)
median <- median(income)
modus <- as.numeric(names(sort(table(income), decreasing = TRUE)[1]))
ggplot(df_income, aes(x = income)) +
geom_histogram(aes(y =..density..),
breaks = seq(-0, 10000, by = 500),
colour = "black",
fill = "gray") +
labs(x = "Einkommen", y = "Häufigkeit") +
geom_vline(xintercept = mittel, color = "red", linetype = "dashed", linewidth = 1) +
geom_vline(xintercept = median, color = "blue", linetype = "dashed", linewidth = 1) +
geom_vline(xintercept = modus, color = "green", linetype = "dashed", linewidth = 1)
ggplot(df_income, aes(x = income)) +
geom_histogram(aes(y =cumsum(..density..)),
breaks = seq(-0, 10000, by = 1),
colour = "gray",
fill = "gray") +
labs(x = "Einkommen", y = "Kumulierte Häufigkeit") +
geom_vline(xintercept = mittel, color = "red", linetype = "dashed", linewidth = 1) +
geom_vline(xintercept = median, color = "blue", linetype = "dashed", linewidth = 1) +
geom_vline(xintercept = modus, color = "green", linetype = "dashed", linewidth = 1)
income_mean <- mean(allbus_messniveau_bsp$di01a)
income_sd <- sd(allbus_messniveau_bsp$di01a)
# Die Verteilungsfunktion der Normalverteilung: "p" + "norm":
pnorm(1500, mean=income_mean, sd=income_sd)
quantile(allbus_messniveau_bsp$di01a, probs = c(0.278))
q <- quantile(allbus_messniveau_bsp$di01a, probs = c(1 - 0.278))
q
pnorm(2977.378, mean=income_mean, sd=income_sd)
qnorm(0.722, mean=income_mean, sd=income_sd)
ggplot(df_income, aes(x = income)) +
geom_histogram(aes(y =..density..),
breaks = seq(-0, 10000, by = 500),
colour = "black",
fill = "gray") +
labs(x = "Einkommen", y = "Häufigkeit") +
geom_vline(xintercept = mittel, color = "red", linetype = "dashed", linewidth = 1) +
geom_vline(xintercept = median, color = "blue", linetype = "dashed", linewidth = 1) +
stat_function(fun=dnorm, args=list(mean=mittel, sd=income_sd), colour="red") +   # Einfügen der Normalcerteilung mit arithm. mittel
stat_function(fun=dnorm, args=list(mean=median, sd=income_sd), colour="blue") +  # Einfügen der NV mit Median
labs(x = "Einkommen", y = "Häufigkeit")
#shapiro.test(allbus_messniveau_bsp$di01a)
qqnorm(allbus_messniveau_bsp$di01a) # Erstellen des Q-Q-Plots
qqline(allbus_messniveau_bsp$di01a) # Einfügen der Linie, auf der die Punkte liegen sollten
log.income = log(allbus_messniveau_bsp$di01a + 42) # 42 wird hier addiert, um negative Messwerte zu vermeiden.
qqnorm(log.income)
qqline(log.income)
log.median <- median(log.income)
log.mean <- mean(log.income)
log.sd <- sd(log.income)
pnorm(log(1500), log.mean, log.sd) # Anpassen der Anfrage an die Verteilungsfunktion
plnorm(1500, log.mean, log.sd)    # Verwenden der bereits implementierten lognormal-Funktion
qnorm(0.278, income_mean, income_sd)
tan.func <- function(x, lamb, mean){
f <- lamb * tanh(-x - mean)
return(f)
}
df.log.income <- data.frame(log.incomeh=atan.func(log.income, 1, log.mean))
ggplot(df.log.income, aes(x = log.incomeh)) +
geom_histogram(aes(y =..density..),
breaks = seq(-0, 10, by = 0.1),
colour = "black",
fill = "gray") +
labs(x = "Einkommen", y = "Häufigkeit") +
geom_vline(xintercept = log.mean, color = "red", linetype = "dashed", linewidth = 1) +
geom_vline(xintercept = log.median, color = "blue", linetype = "dashed", linewidth = 1) +
stat_function(fun=dnorm, args=list(mean=log.mean, sd=log.sd), colour="red") +   # Einfügen der Normalcerteilung mit arithm. mittel
stat_function(fun=dnorm, args=list(mean=log.median, sd=log.sd), colour="blue") +  # Einfügen der NV mit Median
labs(x = "Einkommen", y = "Häufigkeit")
tan.func <- function(x, lamb, mean){
f <- lamb * tanh(-x - mean)
return(f)
}
df.log.income <- data.frame(log.incomeh=atan.func(log.income, 0.5, log.mean))
ggplot(df.log.income, aes(x = log.incomeh)) +
geom_histogram(aes(y =..density..),
breaks = seq(-0, 10, by = 0.1),
colour = "black",
fill = "gray") +
labs(x = "Einkommen", y = "Häufigkeit") +
geom_vline(xintercept = log.mean, color = "red", linetype = "dashed", linewidth = 1) +
geom_vline(xintercept = log.median, color = "blue", linetype = "dashed", linewidth = 1) +
stat_function(fun=dnorm, args=list(mean=log.mean, sd=log.sd), colour="red") +   # Einfügen der Normalcerteilung mit arithm. mittel
stat_function(fun=dnorm, args=list(mean=log.median, sd=log.sd), colour="blue") +  # Einfügen der NV mit Median
labs(x = "Einkommen", y = "Häufigkeit")
tan.func <- function(x, lamb, mean){
f <- lamb * tanh(-x - mean)
return(f)
}
df.log.income <- data.frame(log.incomeh=atan.func(log.income, 5, log.mean))
ggplot(df.log.income, aes(x = log.incomeh)) +
geom_histogram(aes(y =..density..),
breaks = seq(-0, 10, by = 0.1),
colour = "black",
fill = "gray") +
labs(x = "Einkommen", y = "Häufigkeit") +
geom_vline(xintercept = log.mean, color = "red", linetype = "dashed", linewidth = 1) +
geom_vline(xintercept = log.median, color = "blue", linetype = "dashed", linewidth = 1) +
stat_function(fun=dnorm, args=list(mean=log.mean, sd=log.sd), colour="red") +   # Einfügen der Normalcerteilung mit arithm. mittel
stat_function(fun=dnorm, args=list(mean=log.median, sd=log.sd), colour="blue") +  # Einfügen der NV mit Median
labs(x = "Einkommen", y = "Häufigkeit")
tan.func <- function(x, lamb, mean){
f <- lamb * tanh(-x - mean)
return(f)
}
df.log.income <- data.frame(log.incomeh=atan.func(log.income, 10, log.mean))
ggplot(df.log.income, aes(x = log.incomeh)) +
geom_histogram(aes(y =..density..),
breaks = seq(-0, 10, by = 0.1),
colour = "black",
fill = "gray") +
labs(x = "Einkommen", y = "Häufigkeit") +
geom_vline(xintercept = log.mean, color = "red", linetype = "dashed", linewidth = 1) +
geom_vline(xintercept = log.median, color = "blue", linetype = "dashed", linewidth = 1) +
stat_function(fun=dnorm, args=list(mean=log.mean, sd=log.sd), colour="red") +   # Einfügen der Normalcerteilung mit arithm. mittel
stat_function(fun=dnorm, args=list(mean=log.median, sd=log.sd), colour="blue") +  # Einfügen der NV mit Median
labs(x = "Einkommen", y = "Häufigkeit")
tan.func <- function(x, lamb, mean){
f <- lamb * tanh(-x - mean)
return(f)
}
df.log.income <- data.frame(log.incomeh=atan.func(log.income, 6, log.mean))
ggplot(df.log.income, aes(x = log.incomeh)) +
geom_histogram(aes(y =..density..),
breaks = seq(-0, 10, by = 0.1),
colour = "black",
fill = "gray") +
labs(x = "Einkommen", y = "Häufigkeit") +
geom_vline(xintercept = log.mean, color = "red", linetype = "dashed", linewidth = 1) +
geom_vline(xintercept = log.median, color = "blue", linetype = "dashed", linewidth = 1) +
stat_function(fun=dnorm, args=list(mean=log.mean, sd=log.sd), colour="red") +   # Einfügen der Normalcerteilung mit arithm. mittel
stat_function(fun=dnorm, args=list(mean=log.median, sd=log.sd), colour="blue") +  # Einfügen der NV mit Median
labs(x = "Einkommen", y = "Häufigkeit")
if(!require("pacman")) {install.packages("pacman");library(pacman)}
p_load(tidyverse, ggplot2, haven, dplyr)
theme_set(theme_classic())
daten = haven::read_dta("Datensatz/Allbus_2021.dta")
allbus_messniveau_bsp <- subset(daten, select=c("sex", "pt12", "di01a")) %>%
mutate(across(c("sex", "pt12", "di01a"), ~ as.numeric(.))) %>%
mutate(across(c("sex", "pt12", "di01a"), ~ ifelse(.%in% c(-7, -9, -11, -15, -42, -50 ), NA,.))) %>%
na.omit()
df_income <- data.frame(income=allbus_messniveau_bsp$di01a)
mittel <- mean(income)
median <- median(income)
modus <- as.numeric(names(sort(table(income), decreasing = TRUE)[1]))
ggplot(df_income, aes(x = income)) +
geom_histogram(aes(y =..density..),
breaks = seq(-0, 10000, by = 500),
colour = "black",
fill = "gray") +
labs(x = "Einkommen", y = "Häufigkeit") +
geom_vline(xintercept = mittel, color = "red", linetype = "dashed", linewidth = 1) +
geom_vline(xintercept = median, color = "blue", linetype = "dashed", linewidth = 1) +
geom_vline(xintercept = modus, color = "green", linetype = "dashed", linewidth = 1)
ggplot(df_income, aes(x = income)) +
geom_histogram(aes(y =cumsum(..density..)),
breaks = seq(-0, 10000, by = 1),
colour = "gray",
fill = "gray") +
labs(x = "Einkommen", y = "Kumulierte Häufigkeit") +
geom_vline(xintercept = mittel, color = "red", linetype = "dashed", linewidth = 1) +
geom_vline(xintercept = median, color = "blue", linetype = "dashed", linewidth = 1) +
geom_vline(xintercept = modus, color = "green", linetype = "dashed", linewidth = 1)
income_mean <- mean(allbus_messniveau_bsp$di01a)
income_sd <- sd(allbus_messniveau_bsp$di01a)
# Die Verteilungsfunktion der Normalverteilung: "p" + "norm":
pnorm(1500, mean=income_mean, sd=income_sd)
quantile(allbus_messniveau_bsp$di01a, probs = c(0.278))
q <- quantile(allbus_messniveau_bsp$di01a, probs = c(1 - 0.278))
q
pnorm(2977.378, mean=income_mean, sd=income_sd)
qnorm(0.722, mean=income_mean, sd=income_sd)
ggplot(df_income, aes(x = income)) +
geom_histogram(aes(y =..density..),
breaks = seq(-0, 10000, by = 500),
colour = "black",
fill = "gray") +
labs(x = "Einkommen", y = "Häufigkeit") +
geom_vline(xintercept = mittel, color = "red", linetype = "dashed", linewidth = 1) +
geom_vline(xintercept = median, color = "blue", linetype = "dashed", linewidth = 1) +
stat_function(fun=dnorm, args=list(mean=mittel, sd=income_sd), colour="red") +   # Einfügen der Normalcerteilung mit arithm. mittel
stat_function(fun=dnorm, args=list(mean=median, sd=income_sd), colour="blue") +  # Einfügen der NV mit Median
labs(x = "Einkommen", y = "Häufigkeit")
#shapiro.test(allbus_messniveau_bsp$di01a)
qqnorm(allbus_messniveau_bsp$di01a) # Erstellen des Q-Q-Plots
qqline(allbus_messniveau_bsp$di01a) # Einfügen der Linie, auf der die Punkte liegen sollten
log.income = log(allbus_messniveau_bsp$di01a + 42) # 42 wird hier addiert, um negative Messwerte zu vermeiden.
qqnorm(log.income)
qqline(log.income)
log.median <- median(log.income)
log.mean <- mean(log.income)
log.sd <- sd(log.income)
pnorm(log(1500), log.mean, log.sd) # Anpassen der Anfrage an die Verteilungsfunktion
plnorm(1500, log.mean, log.sd)    # Verwenden der bereits implementierten lognormal-Funktion
qnorm(0.278, income_mean, income_sd)
df.log.income <- data.frame(log.incomeh=log.income)
ggplot(df.log.income, aes(x = log.incomeh)) +
geom_histogram(aes(y =..density..),
breaks = seq(-0, 10, by = 0.1),
colour = "black",
fill = "gray") +
labs(x = "Einkommen", y = "Häufigkeit") +
geom_vline(xintercept = log.mean, color = "red", linetype = "dashed", linewidth = 1) +
geom_vline(xintercept = log.median, color = "blue", linetype = "dashed", linewidth = 1) +
stat_function(fun=dnorm, args=list(mean=log.mean, sd=log.sd), colour="red") +   # Einfügen der Normalcerteilung mit arithm. mittel
stat_function(fun=dnorm, args=list(mean=log.median, sd=log.sd), colour="blue") +  # Einfügen der NV mit Median
labs(x = "Einkommen", y = "Häufigkeit")
df.log.income <- data.frame(log.incomeh=log.income)
ggplot(df.log.income, aes(x = log.incomeh)) +
geom_histogram(aes(y =..density..),
breaks = seq(-0, 10, by = 0.1),
colour = "black",
fill = "gray") +
labs(x = "Einkommen", y = "Häufigkeit") +
geom_vline(xintercept = log.mean, color = "red", linetype = "dashed", linewidth = 1) +
geom_vline(xintercept = log.median, color = "blue", linetype = "dashed", linewidth = 1) +
stat_function(fun=dnorm, args=list(mean=log.mean, sd=log.sd/2), colour="red") +   # Einfügen der Normalcerteilung mit arithm. mittel
stat_function(fun=dnorm, args=list(mean=log.median, sd=log.sd), colour="blue") +  # Einfügen der NV mit Median
labs(x = "Einkommen", y = "Häufigkeit")
df.log.income <- data.frame(log.incomeh=log.income)
ggplot(df.log.income, aes(x = log.incomeh)) +
geom_histogram(aes(y =..density..),
breaks = seq(-0, 10, by = 0.1),
colour = "black",
fill = "gray") +
labs(x = "Einkommen", y = "Häufigkeit") +
geom_vline(xintercept = log.mean, color = "red", linetype = "dashed", linewidth = 1) +
geom_vline(xintercept = log.median, color = "blue", linetype = "dashed", linewidth = 1) +
stat_function(fun=dnorm, args=list(mean=log.mean, sd=log.sd), colour="red") +   # Einfügen der Normalcerteilung mit arithm. mittel
stat_function(fun=dnorm, args=list(mean=log.median, sd=log.sd/2), colour="blue") +  # Einfügen der NV mit Median
labs(x = "Einkommen", y = "Häufigkeit")
q1 <- quantile(log.income, probs = c(0.278))
q1
pnorm(q1,  mean=log.median, sd=log.sd/2)
q2 <- quantile(log.income, probs = c(1 - 0.278))
q2
pnorm(q2, mean=log.median, sd=log.sd/2)
if(!require("pacman")) {install.packages("pacman");library(pacman)}
p_load(tidyverse, ggplot2, haven, dplyr)
theme_set(theme_classic())
daten = haven::read_dta("Datensatz/Allbus_2021.dta")
allbus_messniveau_bsp <- subset(daten, select=c("sex", "pt12", "di01a")) %>%
mutate(across(c("sex", "pt12", "di01a"), ~ as.numeric(.))) %>%
mutate(across(c("sex", "pt12", "di01a"), ~ ifelse(.%in% c(-7, -9, -11, -15, -42, -50 ), NA,.))) %>%
na.omit()
df_income <- data.frame(income=allbus_messniveau_bsp$di01a)
mittel <- mean(income)
median <- median(income)
modus <- as.numeric(names(sort(table(income), decreasing = TRUE)[1]))
ggplot(df_income, aes(x = income)) +
geom_histogram(aes(y =..density..),
breaks = seq(-0, 10000, by = 500),
colour = "black",
fill = "gray") +
labs(x = "Einkommen", y = "Häufigkeit") +
geom_vline(xintercept = mittel, color = "red", linetype = "dashed", linewidth = 1) +
geom_vline(xintercept = median, color = "blue", linetype = "dashed", linewidth = 1) +
geom_vline(xintercept = modus, color = "green", linetype = "dashed", linewidth = 1)
ggplot(df_income, aes(x = income)) +
geom_histogram(aes(y =cumsum(..density..)),
breaks = seq(-0, 10000, by = 1),
colour = "gray",
fill = "gray") +
labs(x = "Einkommen", y = "Kumulierte Häufigkeit") +
geom_vline(xintercept = mittel, color = "red", linetype = "dashed", linewidth = 1) +
geom_vline(xintercept = median, color = "blue", linetype = "dashed", linewidth = 1) +
geom_vline(xintercept = modus, color = "green", linetype = "dashed", linewidth = 1)
income_mean <- mean(allbus_messniveau_bsp$di01a)
income_sd <- sd(allbus_messniveau_bsp$di01a)
# Die Verteilungsfunktion der Normalverteilung: "p" + "norm":
pnorm(1500, mean=income_mean, sd=income_sd)
quantile(allbus_messniveau_bsp$di01a, probs = c(0.278))
q <- quantile(allbus_messniveau_bsp$di01a, probs = c(1 - 0.278))
q
pnorm(2977.378, mean=income_mean, sd=income_sd)
qnorm(0.722, mean=income_mean, sd=income_sd)
ggplot(df_income, aes(x = income)) +
geom_histogram(aes(y =..density..),
breaks = seq(-0, 10000, by = 500),
colour = "black",
fill = "gray") +
labs(x = "Einkommen", y = "Häufigkeit") +
geom_vline(xintercept = mittel, color = "red", linetype = "dashed", linewidth = 1) +
geom_vline(xintercept = median, color = "blue", linetype = "dashed", linewidth = 1) +
stat_function(fun=dnorm, args=list(mean=mittel, sd=income_sd), colour="red") +   # Einfügen der Normalcerteilung mit arithm. mittel
stat_function(fun=dnorm, args=list(mean=median, sd=income_sd), colour="blue") +  # Einfügen der NV mit Median
labs(x = "Einkommen", y = "Häufigkeit")
#shapiro.test(allbus_messniveau_bsp$di01a)
qqnorm(allbus_messniveau_bsp$di01a) # Erstellen des Q-Q-Plots
qqline(allbus_messniveau_bsp$di01a) # Einfügen der Linie, auf der die Punkte liegen sollten
log.income = log(allbus_messniveau_bsp$di01a + 42) # 42 wird hier addiert, um negative Messwerte zu vermeiden.
qqnorm(log.income)
qqline(log.income)
log.median <- median(log.income)
log.mean <- mean(log.income)
log.sd <- sd(log.income)
pnorm(log(1500), log.mean, log.sd) # Anpassen der Anfrage an die Verteilungsfunktion
plnorm(1500, log.mean, log.sd)    # Verwenden der bereits implementierten lognormal-Funktion
qnorm(0.278, income_mean, income_sd)
df.log.income <- data.frame(log.incomeh=log.income)
ggplot(df.log.income, aes(x = log.incomeh)) +
geom_histogram(aes(y =..density..),
breaks = seq(-0, 10, by = 0.1),
colour = "black",
fill = "gray") +
labs(x = "Einkommen", y = "Häufigkeit") +
geom_vline(xintercept = log.mean, color = "red", linetype = "dashed", linewidth = 1) +
geom_vline(xintercept = log.median, color = "blue", linetype = "dashed", linewidth = 1) +
stat_function(fun=dnorm, args=list(mean=log.mean, sd=log.sd/2), colour="red") +   # Einfügen der Normalcerteilung mit arithm. mittel
stat_function(fun=dnorm, args=list(mean=log.median, sd=log.sd/2), colour="blue") +  # Einfügen der NV mit Median
labs(x = "Einkommen", y = "Häufigkeit")
x <- 7
lambda <- 3
dpois(x, lambda)
if(!require("pacman")) {install.packages("pacman");library(pacman)}
p_load(tidyverse, ggplot2, haven, dplyr)
theme_set(theme_classic())
daten = haven::read_dta("Datensatz/Allbus_2021.dta")
allbus_messniveau_bsp <- subset(daten, select=c("sex", "pt12", "di01a")) %>%                             # <1>
mutate(across(c("sex", "pt12", "di01a"), ~ as.numeric(.))) %>%                                         # <2>
mutate(across(c("sex", "pt12", "di01a"), ~ ifelse(.%in% c(-7, -9, -11, -15, -42, -50 ), NA,.))) %>%    # <3>
na.omit()                                                                                              # <4>
abs_freq_sex <- table(allbus_messniveau_bsp$sex)
length_sex <- length(allbus_messniveau_bsp$sex)
abs_freq_sex        # Ausgabe der Tabelle
abs_freq_sex <- table(allbus_messniveau_bsp$sex)
length_sex <- length(allbus_messniveau_bsp$sex)
abs_freq_sex        # Ausgabe der Tabelle
sum(abs_freq_sex)
sum(abs_freq_sex)   # Ausgabe der Summe der absoluten Häufigkeiten
length_sex          # Ausgabe der Gesamtanzahl an Merkmalsträgern im Datensatz
rel_freq_sex <- abs_freq_sex / length_sex # Berechnung der relativen Häufigkeiten
rel_freq_sex        # Ausgabe der Tabelle mit den relativen Häufigkeiten
sum(rel_freq_sex) # Ausgabe der Summe der relativen Häufigkeiten
df.sex <- data.frame(
sex=c("male", "female", "diverse"),
frequency=abs_freq_sex
)
ggplot(df.sex, aes(x="", y=frequency.Freq, fill=sex)) +
geom_bar(stat="identity") +
coord_polar("y")
if(!require("pacman")) {install.packages("pacman");library(pacman)}
p_load(tidyverse, ggplot2, haven, dplyr)
theme_set(theme_classic())
daten = haven::read_dta("Datensatz/Allbus_2021.dta")
allbus_messniveau_bsp <- subset(daten, select=c("sex", "pt12", "di01a")) %>%
mutate(across(c("sex", "pt12", "di01a"), ~ as.numeric(.))) %>%
mutate(across(c("sex", "pt12", "di01a"), ~ ifelse(.%in% c(-7, -9, -11, -15, -42, -50 ), NA,.))) %>%
na.omit()
abs_freq_sex <- table(allbus_messniveau_bsp$sex)
length_sex <- length(allbus_messniveau_bsp$sex)
df.sex <- data.frame(
sex=c("male", "female", "diverse"),
frequency=abs_freq_sex
)
ggplot(df.sex, aes(x="", y=frequency.Freq, fill=sex)) +
geom_bar(stat="identity") +
coord_polar("y")
if(!require("pacman")) {install.packages("pacman");library(pacman)}
p_load(tidyverse, ggplot2, haven, dplyr)
theme_set(theme_classic())
daten = haven::read_dta("Datensatz/Allbus_2021.dta")
allbus_messniveau_bsp <- subset(daten, select=c("sex")) %>%                             # <1>
mutate(across(c("sex"), ~ as.numeric(.))) %>%                                         # <2>
mutate(across(c("sex"), ~ ifelse(.%in% c(-7, -9, -11, -15, -42, -50 ), NA,.))) %>%    # <3>
na.omit()                                                                             # <4>
abs_freq_sex <- table(allbus_messniveau_bsp$sex)
length_sex <- length(allbus_messniveau_bsp$sex)
abs_freq_sex        # Ausgabe der Tabelle
sum(abs_freq_sex)   # Ausgabe der Summe der absoluten Häufigkeiten
length_sex          # Ausgabe der Gesamtanzahl an Merkmalsträgern im Datensatz
rel_freq_sex <- abs_freq_sex / length_sex # Berechnung der relativen Häufigkeiten
rel_freq_sex        # Ausgabe der Tabelle mit den relativen Häufigkeiten
df.sex <- data.frame(
sex=c("male", "female", "diverse"),
frequency=abs_freq_sex
)
ggplot(df.sex, aes(x="", y=frequency.Freq, fill=sex)) +
geom_bar(stat="identity") +
coord_polar("y")
if(!require("pacman")) {install.packages("pacman");library(pacman)}
p_load(tidyverse, ggplot2, haven, dplyr)
theme_set(theme_classic())
daten = haven::read_dta("Datensatz/Allbus_2021.dta")
allbus_messniveau_bsp <- subset(daten, select=c("sex", "pt12", "di01a")) %>%
mutate(across(c("sex", "pt12", "di01a"), ~ as.numeric(.))) %>%
mutate(across(c("sex", "pt12", "di01a"), ~ ifelse(.%in% c(-7, -9, -11, -15, -42, -50 ), NA,.))) %>%
na.omit()
df.sex$sex[which.max(df.sex$frequency.Freq)]
allbus_messniveau_bsp$sex$sex[which.max(allbus_messniveau_bsp$.sex$frequency.Freq)]
allbus_messniveau_bsp$sex[which.max(allbus_messniveau_bsp$sex$frequency.Freq)]
=======
mtcars %>%
mean(hp, na.rm = T)
mtcars %>%
mean(.$hp, na.rm = T)
mtcars %>%
mean(.$hp)
mean(mtcars$hp)
mtcars %>%
mean(hp)
mtcars %>%
select(hp) %>%
mean()
mtcars %>%
select(hp) %>%
mean(.)
mtcars %>%
select(hp) %>%
mean(.)
mtcars %>%
select(hp)
mtcars %>%
select(hp) %>%
mean(.)
mtcars %>%
select(hp) %>%
mean(.$hp)
mtcars %>%
pull(hp) %>%
mean()
mtcars %>%
select(hp) %>%
mean()
mtcars %>%
pull(hp) %>%
mean()
mtcars %>%
select(hp)
mtcars %>%
select(hp) %>%
str()
mtcars %>%
select(hp) %>%
mean()
mtcars %>%
pull(hp) %>%
mean()
mtcars %>%
summarize(mean(hp))
mtcars %>%
summarize()
mtcars %>%
summarize(mean)
mtcars %>%
summarize(Mittelwert = mean(hp))
data %>%
str() %>%
summarize(mean (hp))
data %>%
str() %>%
summarize(mean(hp))
data %>%
summarize(mean(hp)) %>%
str()
data %>%
summarize(mean(hp))
mtcars %>%
str() %>%
summarize(mean(hp))
mtcars %>%
str() %>%
pull(hp) %>%
mean()
mtcars %>%
pull(hp) %>%
mean() %>%
str() %>%
mean(mtcars$hp)
head(vertrauen_institutionen$age) # <1>
vertrauen_institutionen <- daten %>%
select(age, pt01, pt02, pt03, pt04, pt06, pt07, pt08, pt09, pt10, pt11, pt12, pt14, pt15, pt19, pt20)
library(pacman)
p_load(haven,tidyr,dplyr)
daten <- read_dta("Datensatz/Allbus_2021.dta")
vertrauen_institutionen <- daten %>%
select(age, pt01, pt02, pt03, pt04, pt06, pt07, pt08, pt09, pt10, pt11, pt12, pt14, pt15, pt19, pt20)
head(vertrauen_institutionen$age) # <1>
View(vertrauen_institutionen)
vertrauen_institutionen$age # <1>
options(max.print = 100)
vertrauen_institutionen$age # <1>
options(max.print = 100)
vertrauen_institutionen$age
library(tidyverse)
daten <- haven::read_dta("Datensatz/Allbus_2021.dta") # <1>
install.packages("tidyverse")
daten <- haven::read_dta("Datensatz/Allbus_2021.dta")
View(daten)
library(labell)
library(labelled)
install.packages("labelled")
library(labelled)
View(daten)
str(daten)
dyplr
library(dplyr)
x <- daten %>% select(sex, yborn, pt01, pt02, pt03)
?label_attribute
get_value_labels(x)
get_value_labels(x$sex)
var_label(x$sex)
library(dplyr)
#x <- daten %>% select(sex, yborn, pt01, pt02, pt03)
colnames(daten)
var_label(x$sex)
var_label(x)
daten_auswahl <- daten %>%
select(sex, yborn, pt01, pt02, pt03)
xx <- var_label(x)
str(xx)
#str(xx)
unlist(xx)
y <- data.frame(unlist(xx))
y
y <- as.data.frame(unlist(xx))
y
y <- tibble(unlist(xx))
y
y <- as.data.frame(unlist(xx))
y
x <- var_label() %>% as.data.frame()
x <- daten_auswahl %>% var_label() %>% as.data.frame()
x <- daten_auswahl %>% var_label() %>% as.data.frame()
View(x)
x <- daten_auswahl %>% var_label() %>% as.data.frame() %>% t()
x <- daten_auswahl %>% var_label() %>% as.data.frame() %>% tidyr::pivot_longer()
x <- daten_auswahl %>% var_label() %>% as.data.frame() %>% tidyr::pivot_longer(.)
x <- daten_auswahl %>% var_label() %>% as.data.frame()
#x <- daten_auswahl %>% var_label() %>% as.data.frame()
x <- daten_auswahl %>% var_label() %>% as.data.frame() %>% data.table::transpose()
x <- daten_auswahl %>% var_label() %>% as.data.frame() %>% t()
x <- daten_auswahl %>% var_label() %>% as.data.frame() %>% t() %>% tibble::rownames_to_column()
x <- daten_auswahl %>% var_label() %>% unlist() %>% t() %>% as.data.frame() %>% tibble::rownames_to_column()
x <- daten_auswahl %>% var_label() %>% as.data.frame() %>% t() %>% tibble::rownames_to_column()
x <- daten_auswahl %>% var_label() %>% as.data.frame() %>% t()
x <- daten_auswahl %>% var_label() %>% unlist() %>% t()
x <- daten_auswahl %>% var_label() %>% unlist()
x
names(x)
daten_auswahl <- daten %>%
select(sex, yborn, pt01:pt05)
daten_auswahl <- daten %>%
select(sex, yborn, pt01:pt04)
variablen <- daten_auswahl %>%
var_label() %>%
unlist() %>%
;
variablen <- daten_auswahl %>%
var_label() %>%
unlist()
variablen
variablen <- daten_auswahl %>%
var_label() %>%
unlist() %>%
as.data.frame() %>%
t()
variablen
variablen <- daten_auswahl %>%
var_label() %>%
unlist() %>%
as.data.frame()
variablen
variablen <- daten_auswahl %>%
var_label() %>%
unlist() %>%
as.data.frame() %>%
tibble::rownames_to_column()
View(variablen)
variablen <- daten_auswahl %>%
var_label() %>%
unlist() %>%
as.data.frame() %>%
tibble::rownames_to_column("variable_name") %>%
rename("description" = ".")
variablen <- daten %>%
var_label() %>%
unlist() %>%
as.data.frame() %>%
tibble::rownames_to_column("variable_name") %>%
rename("description" = ".")
write_excel_csv2(variable, file = "Datensatz/ALLBUS_2021_variablen.csv")
# Datenvorvergarbeitung ALLBUS 2021
# Datenvorvergarbeitung ALLBUS 2021
library(dplyr)
library(tibble)
library(haven)
library(readr)
daten <- read_dta("Datensatz/Allbus_2021.dta")
# Name und Beschreibungen von Variablen extrahieren
variablen <- daten %>%
var_label() %>%
unlist() %>%
as.data.frame() %>%
rownames_to_column("variable_name") %>%
rename("description" = ".")
library(labelled)
# Name und Beschreibungen von Variablen extrahieren
variablen <- daten %>%
var_label() %>%
unlist() %>%
as.data.frame() %>%
rownames_to_column("variable_name") %>%
rename("description" = ".")
write_excel_csv2(variable, file = "Datensatz/ALLBUS_2021_variablen.csv")
write_excel_csv2(variablen, file = "Datensatz/ALLBUS_2021_variablen.csv")
View(daten)
str(daten)
View(daten)
str(daten)
?na_if
starwars %>%
mutate(across(where(is.character), ~na_if(., "unknown")))
starwars
starwars %>%
mutate(across(where(is.character), ~na_if(., "unknown")))
starwars %>%
mutate(across(where(is.character), ~na_if(., "unknown")))
x <- starwars %>%
mutate(across(where(is.character), ~na_if(., "unknown")))
xx <- starwars
View(xx)
daten2 <- daten %>%
mutate(across(where(is.numeric()), ~na_if(., . < 0)))
daten2 <- daten %>%
mutate(across(where(is.numeric()), ~na_if(., < 0)))
daten2 <- daten %>%
mutate(across(where(is.numeric()), ~na_if(., .<0))
)
daten2 <- daten %>%
mutate(across(where(is.numeric()), ~na_if(., .<0)))
daten2 <- daten %>%
mutate(across(where(is.numeric(.)), ~na_if(., .<0)))
daten2 <- daten %>%
mutate(across(where(is.numeric), ~na_if(., .<0)))
daten_auswahl <- daten %>%
select(sex, yborn, pt01:pt04)
View(daten_auswahl)
daten_auswahl <- daten %>%
select(sex, yborn, pt01:pt04) %>%
mutate(across(where(is.numeric), ~ ifelse(.x < 0, NA, .x)))
daten2 <- daten %>%
#mutate(across(where(is.numeric), ~na_if(., .<0)))
mutate(across(where(is.numeric), ~ ifelse(.x < 0, NA, .x)))
View(daten2)
View(variablen)
sample_klein <- daten %>%
select(age, sex, lm01) %>%
slice_sample(n = 20)
View(sample_klein)
get_value_labels(sample_klein$age)
get_value_labels(sample_klein$sex)
get_value_labels(sample_klein$lm01)
?get_value_labels
x <- sample_klein$lm01
x
x <- sample_klein$lm01
abc <- lookfor(daten)
View(abc)
abc2 <- lookfor_to_long_format(daten)
View(abc2)
View(abc2)
abc2 <- lookfor_to_long_format(abc)
str(abc2)
abc3 <- convert_list_columns_to_character(abc2)
View(abc3)
View(abc2)
View(abc3)
variablen <- look_for(daten)
View(variablen)
#abc <- lookfor(daten)
?to_labelled
?haven::labelled
View(abc3)
sample_klein <- daten %>%
select(age, sex, lm01) %>%
slice_sample(n = 20)
sample_klein %>%
look_for() %>%
lookfor_to_long_format() %>%
convert_list_columns_to_character()
xyz <- sample_klein %>%
look_for() %>%
lookfor_to_long_format() %>%
convert_list_columns_to_character()
View(xyz)
# Wenige Fälle, wenige Variablen
sample_klein <- daten %>%
select(age, sex, lm01) %>%
mutate(across(age, sex, lm01), as.factor()) %>%
slice_sample(n = 20)
# Wenige Fälle, wenige Variablen
sample_klein <- daten %>%
select(age, sex, lm01) %>%
mutate(across(c(age, sex, lm01)), as_factor()) %>%
slice_sample(n = 20)
# Wenige Fälle, wenige Variablen
sample_klein <- daten %>%
select(age, sex, lm01) %>%
mutate(across(c(age, sex, lm01)), as_factor) %>%
slice_sample(n = 20)
# Wenige Fälle, wenige Variablen
sample_klein <- daten %>%
select(age, sex, lm01) %>%
mutate(across(c(age, sex, lm01), as_factor)) %>%
slice_sample(n = 20)
View(sample_klein)
str(sample_klein)
# Wenige Fälle, wenige Variablen
sample_klein <- daten %>%
select(age, sex, lm01) %>%
mutate(across(c(age, sex, lm01), as_factor)) %>%
remove_labels() %>%
#remove_attributes("format.stata") %>%
slice_sample(n = 20)
str(sample_klein)
# Wenige Fälle, wenige Variablen
sample_klein <- daten %>%
select(age, sex, lm01) %>%
mutate(across(c(age, sex, lm01), as_factor)) %>%
remove_labels() %>%
remove_attributes("format.stata") %>%
slice_sample(n = 20)
str(sample_klein)
# Wenige Fälle, wenige Variablen
sample_klein <- daten %>%
select(age, sex, lm01) %>%
mutate(across(where(is.character), as_factor)) %>%
remove_labels() %>%
remove_attributes("format.stata") %>%
slice_sample(n = 20)
# Wenige Fälle, wenige Variablen
sample_klein <- daten %>%
select(age, sex, lm01) %>%
mutate(across(c(age, sex, lm01), as_factor)) %>%
remove_labels() %>%
remove_attributes("format.stata") %>%
slice_sample(n = 20)
str(sample_klein)
# Wenige Fälle, wenige Variablen
sample_klein <- daten %>%
select(age, sex, lm01) %>%
mutate(across(c(sex, lm01), as_factor)) %>%
remove_labels() %>%
remove_attributes("format.stata") %>%
slice_sample(n = 20)
str(sample_klein)
levels(sample_klein$sex)
levels(sample_klein$lm01)
# simpler
variablen <- look_for(daten)
# inkl. antwortoptionen
variablen_optionen <- lookfor_to_long_format(variablen)
View(variablen_optionen)
# simpler
variablen <- daten %>%
look_for() %>%
select(pos, variable, label, value_labels)
# simpler
variablen <- daten %>%
look_for() %>%
select(pos, variable, label, value_labels)
# inkl. antwortoptionen
variablen_optionen <- daten %>%
look_for() %>%
lookfor_to_long_format() %>%
select(pos, variable, label, value_labels)
View(variablen_optionen)
str(variablen_optionen)
# Liste speichern
write_excel_csv2(variablen, file = "Datensatz/ALLBUS_2021_variablen.csv")
write_excel_csv2(variablen, file = "Datensatz/ALLBUS_2021_variablen_optionen.csv")
# Datenvorvergarbeitung ALLBUS 2021
# Libraries
library(dplyr)
library(tibble)
library(haven)
library(readr)
library(labelled)
# Daten einlesen und NAs korrigieren
daten <- read_dta("Datensatz/Allbus_2021.dta") %>%
mutate(across(where(is.numeric), ~ ifelse(.x < 0, NA, .x)))
# Name und Beschreibungen von Variablen extrahieren
#variablen <- daten %>%
#  var_label() %>%
#  unlist() %>%
#  as.data.frame() %>%
#  rownames_to_column("variable_name") %>%
#  rename("description" = ".")
# simpler
variablen <- daten %>%
look_for() %>%
select(pos, variable, label, value_labels)
# inkl. antwortoptionen
variablen_optionen <- daten %>%
look_for() %>%
lookfor_to_long_format() %>%
select(pos, variable, label, value_labels)
# Liste speichern
write_excel_csv2(variablen, file = "Datensatz/ALLBUS_2021_variablen.csv")
write_excel_csv2(variablen, file = "Datensatz/ALLBUS_2021_variablen_optionen.csv")
write_excel_csv2(variablen_optionen, file = "Datensatz/ALLBUS_2021_variablen_optionen.csv")
# Subsamples erstellen
# Wenige Fälle, wenige Variablen
sample_klein <- daten %>%
select(age, sex, lm01) %>%
mutate(across(c(sex, lm01), as_factor)) %>%
remove_labels() %>%
remove_attributes("format.stata") %>%
slice_sample(n = 20)
View(sample_klein)
View(daten)
# Wenige Fälle, wenige Variablen
sample_klein <- daten %>%
select(age, sex, lm01) %>%
mutate(across(c(sex, lm01), as_factor))
View(sample_klein)
View(daten)
str(daten)
View(variablen_optionen)
View(variablen)
# Daten einlesen und NAs korrigieren
daten <- read_dta("Datensatz/Allbus_2021.dta")
# simpler
variablen <- daten %>%
look_for() %>%
select(pos, variable, label, value_labels)
# inkl. antwortoptionen
variablen_optionen <- daten %>%
look_for() %>%
lookfor_to_long_format() %>%
select(pos, variable, label, value_labels)
# Liste speichern
write_excel_csv2(variablen, file = "Datensatz/ALLBUS_2021_variablen.csv")
write_excel_csv2(variablen_optionen, file = "Datensatz/ALLBUS_2021_variablen_optionen.csv")
View(variablen)
View(variablen_optionen)
# Subsamples erstellen
# Wenige Fälle, wenige Variablen
sample_klein <- daten %>%
select(age, sex, lm01) %>%
mutate(across(c(sex, lm01), as_factor)) %>%
remove_labels() %>%
remove_attributes("format.stata") %>%
slice_sample(n = 20)
View(sample_klein)
sample_klein <- daten %>%
select(age, sex, lm01) %>%
=======
group_by(Partei) %>%
summarise(Vertrauenswürdigkeit = mean(vertrauen_zeitungswesen, na.rm = T))
ggplot(vertrauen_nach_partei, aes(Partei, Vertrauenswürdigkeit, group = 1)) +
geom_line() + geom_point(size = 1) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
ggtitle("Vertrauen in die Presse nach Partei")
vertrauen_nach_partei <- sample_gross %>%
rename(Partei = wahlabsicht_partei) %>%
group_by(Partei) %>%
summarise(Vertrauenswürdigkeit = mean(vertrauen_zeitungswesen, na.rm = T))
ggplot(vertrauen_nach_partei, aes(Partei, Vertrauenswürdigkeit, group = 1)) +
geom_line() + geom_point(size = 2) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
ggtitle("Vertrauen in die Presse nach Partei")
vertrauen_nach_partei <- sample_gross %>%
rename(Partei = wahlabsicht_partei) %>%
group_by(Partei) %>%
summarise(Vertrauenswürdigkeit = mean(vertrauen_zeitungswesen, na.rm = T))
ggplot(vertrauen_nach_partei, aes(Partei, Vertrauenswürdigkeit, group = 1)) +
geom_line() + geom_point(size = 3) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
ggtitle("Vertrauen in die Presse nach Partei")
daten$di01a
x <- daten$di01a
x[x<0] <- NA
head(x)
head(x, 100)
mean(x)
mean(x, na.rm = T)
alter_und_einkommen <- daten %>%
select(age, di01a) %>%
>>>>>>> Stashed changes
rename(alter = age,
einkommen = di01a) %>%
replace_with_na_all(condition = ~.x < 0) %>%
remove_labels() %>%
remove_attributes("format.stata")
<<<<<<< Updated upstream
View(sample_klein)
View(sample_klein)
>>>>>>> b92a17b7de9a522f8cddfc34afb25d7f652b998d
=======
alter_und_einkommen
alter_und_einkommen <- daten %>%
select(age, di01a) %>%
rename(alter = age,
einkommen = di01a) %>%
replace_with_na_all(condition = ~.x < 0) %>%
drop_na()
View(alter_und_einkommen)
alter_und_einkommen
ggplot(alter_und_einkommen, aes(alter, einkommen)) +
geom_point()
#daten_auswahl <- daten_vier_laender %>%
#  select(polintr, nwspol, cntry, gndr) %>%
#  mutate(polintr = as.numeric(forcats::fct_rev(polintr)),
#         nwspol = log(nwspol)) %>%
#  filter(!nwspol == -Inf) %>%
#  group_by(cntry) %>%
#  slice_sample(n = 50)
ggplot(alter_und_einkommen, aes(alter, einkommen)) +
geom_jitter(width = .5, size = 1) +
geom_smooth(method = 'lm', formula = 'y ~ x') +
ggtitle("Zusammenhang zwischen politischem Interesse und Nachrichtennutzung") +
xlab("politisches Interesse") + ylab("Nachrichtennutzung in Minuten (log)")
alter_und_einkommen <- daten %>%
select(age, di01a) %>%
rename(alter = age,
einkommen = di01a) %>%
replace_with_na_all(condition = ~.x < 0) %>%
drop_na() %>%
slice_sample(n = 40)
# remove_labels() %>%
#  remove_attributes("format.stata")
alter_und_einkommen
ggplot(alter_und_einkommen, aes(alter, einkommen)) +
geom_point()
#daten_auswahl <- daten_vier_laender %>%
#  select(polintr, nwspol, cntry, gndr) %>%
#  mutate(polintr = as.numeric(forcats::fct_rev(polintr)),
#         nwspol = log(nwspol)) %>%
#  filter(!nwspol == -Inf) %>%
#  group_by(cntry) %>%
#  slice_sample(n = 50)
ggplot(alter_und_einkommen, aes(alter, einkommen)) +
geom_jitter(width = .5, size = 1) +
geom_smooth(method = 'lm', formula = 'y ~ x') +
ggtitle("Zusammenhang zwischen politischem Interesse und Nachrichtennutzung") +
xlab("politisches Interesse") + ylab("Nachrichtennutzung in Minuten (log)")
ggplot(alter_und_einkommen, aes(alter, einkommen)) +
geom_jitter(width = .5, size = 1) +
geom_smooth(method = 'lm', formula = 'y ~ x') +
ggtitle("Zusammenhang zwischen Alter und Nettoeinkommen") +
xlab("Alter") + ylab("Nettoeinkommen in Euro")
einkommen <- daten %>%
select(age, sex, educ, di01a) %>%
rename(alter = age,
geschlecht = sex,
bildung = educ,
einkommen = di01a) %>%
replace_with_na_all(condition = ~.x < 0) %>%
drop_na() %>%
slice_sample(n = 40)
einkommen
ggplot(einkommen, aes(alter, einkommen)) +
geom_point()
einkommen <- daten %>%
select(age, sex, educ, di01a) %>%
rename(alter = age,
geschlecht = sex,
bildung = educ,
einkommen = di01a) %>%
replace_with_na_all(condition = ~.x < 0) %>%
mutate(geschlecht = as_factor(geschlecht),
bildung = as_factor(bildung)) %>%
#  remove_labels() %>%
#  remove_attributes("format.stata")
drop_na() %>%
slice_sample(n = 40)
einkommen
ggplot(einkommen, aes(alter, einkommen)) +
geom_point()
ggplot(alter_und_einkommen, aes(alter, einkommen)) +
geom_jitter(width = .5, size = 1) +
geom_smooth(method = 'lm', formula = 'y ~ x') +
ggtitle("Zusammenhang zwischen Alter und Nettoeinkommen") +
xlab("Alter") + ylab("Nettoeinkommen in Euro")
ggplot(einkommen, aes(alter, einkommen)) +
geom_jitter(width = .5, size = 1) +
geom_smooth(method = 'lm', formula = 'y ~ x') +
ggtitle("Zusammenhang zwischen Alter und Nettoeinkommen") +
xlab("Alter") + ylab("Nettoeinkommen in Euro")
ggplot(einkommen, aes(alter, einkommen, color = bildung, shape = geschlecht)) +
geom_jitter(width = .5, height = .5, size = 2) +
#geom_smooth(method = 'lm', formula = 'y ~ x', se = FALSE) +
ggtitle("Zusammenhang zwischen politischem Interesse und Nachrichtennutzung") +
xlab("politisches Interesse") + ylab("Nachrichtennutzung in Minuten (log)") +
labs(color = "Land") + labs(shape = "Geschlecht")
ggplot(einkommen, aes(alter, einkommen, color = bildung, shape = geschlecht)) +
geom_jitter(width = .5, height = .5, size = 4) +
#geom_smooth(method = 'lm', formula = 'y ~ x', se = FALSE) +
ggtitle("Zusammenhang zwischen politischem Interesse und Nachrichtennutzung") +
xlab("politisches Interesse") + ylab("Nachrichtennutzung in Minuten (log)") +
labs(color = "Land") + labs(shape = "Geschlecht")
ggplot(einkommen, aes(alter, einkommen, color = bildung, shape = geschlecht)) +
geom_jitter(width = .5, height = .5, size = 3) +
#geom_smooth(method = 'lm', formula = 'y ~ x', se = FALSE) +
ggtitle("Zusammenhang zwischen politischem Interesse und Nachrichtennutzung") +
xlab("politisches Interesse") + ylab("Nachrichtennutzung in Minuten (log)") +
labs(color = "Land") + labs(shape = "Geschlecht")
ggplot(einkommen, aes(alter, einkommen)) +
geom_jitter(width = .5, size = 2) +
geom_smooth(method = 'lm', formula = 'y ~ x') +
ggtitle("Zusammenhang zwischen Alter und Nettoeinkommen") +
xlab("Alter") + ylab("Nettoeinkommen in Euro")
library(tidyverse)
theme_set(theme_minimal())
sample_klein <- read_rds("Datensatz/ALLBUS_sample_klein.rds")
sample_mittel <- read_rds("Datensatz/ALLBUS_sample_mittel.rds")
sample_gross <- read_rds("Datensatz/ALLBUS_sample_gross.rds")
sample_klein
geschlechterverteilung <- sample_klein %>%
group_by(geschlecht) %>%
summarise(anzahl = n())
geschlechterverteilung
geschlechterverteilung <- sample_klein %>%
group_by(geschlecht) %>%
summarise(anzahl = n()) %>%
mutate(anteil = anzahl/sum(anzahl))
geschlechterverteilung
geschlechterverteilung <- sample_klein %>%
group_by(geschlecht) %>%
summarise(anzahl = n()) %>%
mutate(anteil = anzahl/sum(anzahl),
prozent = round(anteil * 100))
geschlechterverteilung
write_excel_csv2(geschlechterverteilung, file = "geschlechterverteilung.csv")
bildung_und_geschlecht <- sample_klein %>%
group_by(bildung, geschlecht) %>%
summarise(anzahl = n()) %>%
mutate(anteil = anzahl/sum(anzahl),
prozent = round(anteil * 100))
bildung_und_geschlecht
geschlecht_und_bildung <- sample_klein %>%
group_by(geschlecht, bildung) %>%
summarise(anzahl = n()) %>%
mutate(anteil = anzahl/sum(anzahl),
prozent = round(anteil * 100))
geschlecht_und_bildung
ggplot(sample_klein, aes(bildung)) +
geom_bar()
ggplot(sample_klein, aes(geschlecht, fill = geschlecht)) +
geom_bar()
ggplot(sample_klein, aes(geschlecht, fill = geschlecht)) +
geom_bar() +
scale_fill_brewer(palette = "Set1")  # ersetzen Sie "Set1" durch "Reds"
ggplot(sample_klein, aes(as_factor(fernsehkonsum))) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
ggtitle("Fernsehkonsum pro Woche in Tagen") +
xlab("Fernsehkonsum pro Woche in Tagen") + ylab("Anzahl der Respondenten")
ggplot(sample_mittel, aes(alter)) +
geom_histogram()
ggplot(sample_mittel, aes(alter)) +
geom_histogram(bins = 40) +
ggtitle("Altersverteilung der Respondenten") +
xlab("Alter") + ylab("Anzahl der Respondenten")
ggplot(sample_gross, aes(vertrauen_polizei, fill = geschlecht)) +
geom_histogram(binwidth = 1, position = "dodge") +
ggtitle("Vertrauen in die Polizei nach Geschlecht") +
xlab("Vetrauen (1-7)") + ylab("Anzahl der Respondenten") + labs(fill = "Geschlecht")
polizei <- sample_gross %>% select(vertrauen_polizei, geschlecht) %>% filter(!is.na(geschlecht))
ggplot(polizei, aes(vertrauen_polizei, fill = geschlecht)) +
geom_density(alpha = 0.5) +
ggtitle("Vertrauen in die Polizei nach Geschlecht") +
xlab("Vetrauen (1-7)") + ylab("Anteil der Respondenten") + labs(fill = "Geschlecht")
vertrauen_nach_partei <- sample_gross %>%
rename(Partei = wahlabsicht_partei) %>%
group_by(Partei) %>%
summarise(Vertrauenswürdigkeit = mean(vertrauen_zeitungswesen, na.rm = T))
ggplot(vertrauen_nach_partei, aes(Partei, Vertrauenswürdigkeit, group = 1)) +
geom_line() + geom_point(size = 3) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
ggtitle("Vertrauen in die Presse nach Partei")
vertrauen_international <- daten_vier_laender %>%
rename(Land = cntry) %>%
group_by(Land) %>%
summarise(Vertrauenswürdigkeit = mean(trstep, na.rm = T)) %>%
arrange(desc(Vertrauenswürdigkeit)) %>%
mutate(Rang = row_number())
sample_gross2 <- sample_gross %>%
mutate(altergruppe = cut(alter,
breaks = c(0, 24, 34, 44, 54, 64, Inf),
labels = c("18-24", "25-34", "35-44", "45-54", "55-64", "65+")))
View(sample_gross2)
sample_gross2$social_media_nachrichtenquelle
head(sample_gross2$social_media_nachrichtenquelle)
head(as.numeric(sample_gross2$social_media_nachrichtenquelle))
# Mehr Fälle, viele Variablen
sample_gross <- daten %>%
select(age, sex, lm01, pa02a, pa01, pv01, ps03, cf03, lm35:lm39, st01:pt20) %>%
slice_sample(n = 500) %>%
rename(alter = age,
geschlecht = sex,
fernsehkonsum = lm01,
politisches_interesse = pa02a,
links_rechts_einordnung = pa01,
wahlabsicht_partei = pv01,
zufriedenheit_demokratie = ps03,
entwicklung_kriminalitaet = cf03,
social_media_nachrichtenquelle = lm35,
glaubwuerdigkeit_oer_tv = lm36,
glaubwuerdigkeit_privat_tv = lm37,
glaubwuerdigkeit_zeitungen = lm38,
glaubwuerdigkeit_social_media = lm39,
vertrauen_mitmenschen = st01,
vertrauen_gesundheitswesen = pt01,
vertrauen_bundesverfassungsgericht = pt02,
vertrauen_bundestag = pt03,
vertrauen_stadt_gemeindeverwaltung = pt04,
vertrauen_katholische_kirche = pt06,
vertrauen_evangelische_kirche = pt07,
vertrauen_justiz = pt08,
vertrauen_fernsehen = pt09,
vertrauen_zeitungswesen = pt10,
vertrauen_hochschulen = pt11,
vertrauen_bundesregierung = pt12,
vertrauen_polizei = pt14,
vertrauen_parteien = pt15,
vertrauen_eu_kommission = pt19,
vertrauen_eu_parlament = pt20) %>%
replace_with_na_all(condition = ~.x < 0) %>%
mutate(across(c(geschlecht, fernsehkonsum, politisches_interesse, wahlabsicht_partei, zufriedenheit_demokratie, entwicklung_kriminalitaet,
glaubwuerdigkeit_oer_tv, glaubwuerdigkeit_privat_tv, glaubwuerdigkeit_zeitungen,
glaubwuerdigkeit_social_media), as_factor)) %>%
remove_labels() %>%
remove_attributes("format.stata")
# Libraries laden
library(dplyr)
library(tibble)
library(haven)
library(readr)
library(labelled)
library(naniar)
# Mehr Fälle, viele Variablen
sample_gross <- daten %>%
select(age, sex, lm01, pa02a, pa01, pv01, ps03, cf03, lm35:lm39, st01:pt20) %>%
slice_sample(n = 500) %>%
rename(alter = age,
geschlecht = sex,
fernsehkonsum = lm01,
politisches_interesse = pa02a,
links_rechts_einordnung = pa01,
wahlabsicht_partei = pv01,
zufriedenheit_demokratie = ps03,
entwicklung_kriminalitaet = cf03,
social_media_nachrichtenquelle = lm35,
glaubwuerdigkeit_oer_tv = lm36,
glaubwuerdigkeit_privat_tv = lm37,
glaubwuerdigkeit_zeitungen = lm38,
glaubwuerdigkeit_social_media = lm39,
vertrauen_mitmenschen = st01,
vertrauen_gesundheitswesen = pt01,
vertrauen_bundesverfassungsgericht = pt02,
vertrauen_bundestag = pt03,
vertrauen_stadt_gemeindeverwaltung = pt04,
vertrauen_katholische_kirche = pt06,
vertrauen_evangelische_kirche = pt07,
vertrauen_justiz = pt08,
vertrauen_fernsehen = pt09,
vertrauen_zeitungswesen = pt10,
vertrauen_hochschulen = pt11,
vertrauen_bundesregierung = pt12,
vertrauen_polizei = pt14,
vertrauen_parteien = pt15,
vertrauen_eu_kommission = pt19,
vertrauen_eu_parlament = pt20) %>%
replace_with_na_all(condition = ~.x < 0) %>%
mutate(across(c(geschlecht, fernsehkonsum, politisches_interesse, wahlabsicht_partei, zufriedenheit_demokratie, entwicklung_kriminalitaet,
glaubwuerdigkeit_oer_tv, glaubwuerdigkeit_privat_tv, glaubwuerdigkeit_zeitungen,
glaubwuerdigkeit_social_media), as_factor)) %>%
remove_labels() %>%
remove_attributes("format.stata")
# Daten einlesen und NAs korrigieren
daten <- read_dta("Datensatz/Allbus_2021.dta")
# Mehr Fälle, viele Variablen
sample_gross <- daten %>%
select(age, sex, lm01, pa02a, pa01, pv01, ps03, cf03, lm35:lm39, st01:pt20) %>%
slice_sample(n = 500) %>%
rename(alter = age,
geschlecht = sex,
fernsehkonsum = lm01,
politisches_interesse = pa02a,
links_rechts_einordnung = pa01,
wahlabsicht_partei = pv01,
zufriedenheit_demokratie = ps03,
entwicklung_kriminalitaet = cf03,
social_media_nachrichtenquelle = lm35,
glaubwuerdigkeit_oer_tv = lm36,
glaubwuerdigkeit_privat_tv = lm37,
glaubwuerdigkeit_zeitungen = lm38,
glaubwuerdigkeit_social_media = lm39,
vertrauen_mitmenschen = st01,
vertrauen_gesundheitswesen = pt01,
vertrauen_bundesverfassungsgericht = pt02,
vertrauen_bundestag = pt03,
vertrauen_stadt_gemeindeverwaltung = pt04,
vertrauen_katholische_kirche = pt06,
vertrauen_evangelische_kirche = pt07,
vertrauen_justiz = pt08,
vertrauen_fernsehen = pt09,
vertrauen_zeitungswesen = pt10,
vertrauen_hochschulen = pt11,
vertrauen_bundesregierung = pt12,
vertrauen_polizei = pt14,
vertrauen_parteien = pt15,
vertrauen_eu_kommission = pt19,
vertrauen_eu_parlament = pt20) %>%
replace_with_na_all(condition = ~.x < 0) %>%
mutate(across(c(geschlecht, fernsehkonsum, politisches_interesse, wahlabsicht_partei, zufriedenheit_demokratie, entwicklung_kriminalitaet,
glaubwuerdigkeit_oer_tv, glaubwuerdigkeit_privat_tv, glaubwuerdigkeit_zeitungen,
glaubwuerdigkeit_social_media), as_factor)) %>%
remove_labels() %>%
remove_attributes("format.stata")
write_rds(sample_gross, file = "Datensatz/ALLBUS_sample_gross.rds")
sample_gross2 <- sample_gross %>%
mutate(altergruppe = cut(alter,
breaks = c(0, 24, 34, 44, 54, 64, Inf),
labels = c("18-24", "25-34", "35-44", "45-54", "55-64", "65+")))
#sample_gross2 <- sample_gross %>%
View(sample_gross2)
# Mehr Fälle, viele Variablen
sample_gross <- daten %>%
select(age, sex, lm01, pa02a, pa01, pv01, ps03, cf03, lm35:lm39, st01:pt20) %>%
slice_sample(n = 500) %>%
rename(alter = age,
geschlecht = sex,
fernsehkonsum = lm01,
politisches_interesse = pa02a,
links_rechts_einordnung = pa01,
wahlabsicht_partei = pv01,
zufriedenheit_demokratie = ps03,
entwicklung_kriminalitaet = cf03,
social_media_nachrichtenquelle = lm35,
glaubwuerdigkeit_oer_tv = lm36,
glaubwuerdigkeit_privat_tv = lm37,
glaubwuerdigkeit_zeitungen = lm38,
glaubwuerdigkeit_social_media = lm39,
vertrauen_mitmenschen = st01,
vertrauen_gesundheitswesen = pt01,
vertrauen_bundesverfassungsgericht = pt02,
vertrauen_bundestag = pt03,
vertrauen_stadt_gemeindeverwaltung = pt04,
vertrauen_katholische_kirche = pt06,
vertrauen_evangelische_kirche = pt07,
vertrauen_justiz = pt08,
vertrauen_fernsehen = pt09,
vertrauen_zeitungswesen = pt10,
vertrauen_hochschulen = pt11,
vertrauen_bundesregierung = pt12,
vertrauen_polizei = pt14,
vertrauen_parteien = pt15,
vertrauen_eu_kommission = pt19,
vertrauen_eu_parlament = pt20) %>%
replace_with_na_all(condition = ~.x < 0) %>%
mutate(across(c(geschlecht, politisches_interesse, wahlabsicht_partei, zufriedenheit_demokratie,
entwicklung_kriminalitaet, glaubwuerdigkeit_oer_tv, glaubwuerdigkeit_privat_tv,
glaubwuerdigkeit_zeitungen, glaubwuerdigkeit_social_media), as_factor)
fernsehkonsum = round(fernsehkonsum),
# Mehr Fälle, viele Variablen
sample_gross <- daten %>%
select(age, sex, lm01, pa02a, pa01, pv01, ps03, cf03, lm35:lm39, st01:pt20) %>%
slice_sample(n = 500) %>%
rename(alter = age,
geschlecht = sex,
fernsehkonsum = lm01,
politisches_interesse = pa02a,
links_rechts_einordnung = pa01,
wahlabsicht_partei = pv01,
zufriedenheit_demokratie = ps03,
entwicklung_kriminalitaet = cf03,
social_media_nachrichtenquelle = lm35,
glaubwuerdigkeit_oer_tv = lm36,
glaubwuerdigkeit_privat_tv = lm37,
glaubwuerdigkeit_zeitungen = lm38,
glaubwuerdigkeit_social_media = lm39,
vertrauen_mitmenschen = st01,
vertrauen_gesundheitswesen = pt01,
vertrauen_bundesverfassungsgericht = pt02,
vertrauen_bundestag = pt03,
vertrauen_stadt_gemeindeverwaltung = pt04,
vertrauen_katholische_kirche = pt06,
vertrauen_evangelische_kirche = pt07,
vertrauen_justiz = pt08,
vertrauen_fernsehen = pt09,
vertrauen_zeitungswesen = pt10,
vertrauen_hochschulen = pt11,
vertrauen_bundesregierung = pt12,
vertrauen_polizei = pt14,
vertrauen_parteien = pt15,
vertrauen_eu_kommission = pt19,
vertrauen_eu_parlament = pt20) %>%
replace_with_na_all(condition = ~.x < 0) %>%
mutate(across(c(geschlecht, politisches_interesse, wahlabsicht_partei, zufriedenheit_demokratie,
entwicklung_kriminalitaet, glaubwuerdigkeit_oer_tv, glaubwuerdigkeit_privat_tv,
glaubwuerdigkeit_zeitungen, glaubwuerdigkeit_social_media), as_factor),
fernsehkonsum = round(fernsehkonsum),
social_media_nachrichtenquelle = round(social_media_nachrichtenquelle)) %>%
remove_labels() %>%
remove_attributes("format.stata")
write_rds(sample_gross, file = "Datensatz/ALLBUS_sample_gross.rds")
sample_gross2 <- sample_gross %>%
mutate(altergruppe = cut(alter,
breaks = c(0, 24, 34, 44, 54, 64, Inf),
labels = c("18-24", "25-34", "35-44", "45-54", "55-64", "65+")))
View(sample_gross2)
social_media <- sample_gross %>%
mutate(altergruppe = cut(alter,
breaks = c(0, 24, 34, 44, 54, 64, Inf),
labels = c("18-24", "25-34", "35-44", "45-54", "55-64", "65+"))) %>%
select(altergruppe, geschlecht, zufriedenheit_demokratie, social_media_nachrichtenquelle)
View(social_media)
social_media_aggregiert <- social_media %>%
group_by(altersgruppe, geschlecht, zufriedenheit_demokratie) %>%
summarise(socmedia = median(social_media_nachrichtenquelle))
View(social_media)
social_media <- sample_gross %>%
mutate(altersgruppe = cut(alter,
breaks = c(0, 24, 34, 44, 54, 64, Inf),
labels = c("18-24", "25-34", "35-44", "45-54", "55-64", "65+"))) %>%
select(altersgruppe, geschlecht, zufriedenheit_demokratie, social_media_nachrichtenquelle)
social_media_aggregiert <- social_media %>%
group_by(altersgruppe, geschlecht, zufriedenheit_demokratie) %>%
summarise(socmedia = median(social_media_nachrichtenquelle))
ggplot(social_media_aggregiert, aes(zufriedenheit_demokratie, socmedia, fill = geschlecht)) +
geom_bar(stat = "identity", position = "dodge") +
facet_grid(altersgruppe ~ ., switch = "y") +
ggtitle("Internetnutzung und Soziodemographie aggregiert nach Land")
View(social_media_aggregiert)
social_media_aggregiert <- social_media %>%
group_by(altersgruppe, geschlecht, zufriedenheit_demokratie) %>%
summarise(socmedia = median(social_media_nachrichtenquelle)) %>%
drop_na()
ggplot(social_media_aggregiert, aes(zufriedenheit_demokratie, socmedia, fill = geschlecht)) +
geom_bar(stat = "identity", position = "dodge") +
facet_grid(altersgruppe ~ ., switch = "y") +
ggtitle("Internetnutzung und Soziodemographie aggregiert nach Land")
social_media_aggregiert <- social_media %>%
group_by(altersgruppe, geschlecht, zufriedenheit_demokratie) %>%
summarise(socmedia = median(social_media_nachrichtenquelle)) %>%
drop_na()
ggplot(social_media_aggregiert, aes(zufriedenheit_demokratie, socmedia, fill = geschlecht)) +
geom_bar(stat = "identity", position = "dodge") +
facet_grid(altersgruppe ~ ., switch = "y") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
ggtitle("Demokratiezufriedenheit und Social Media-Nutzung nach Alter und Geschlecht")
View(social_media)
ggplot(social_media, aes(zufriedenheit_demokratie, social_media_nachrichtenquelle)) +
geom_boxplot()
View(social_media)
View(social_media)
ggplot(social_media, aes(zufriedenheit_demokratie, social_media_nachrichtenquelle, fill = geschlecht)) +
geom_boxplot()
ggplot(social_media, aes(zufriedenheit_demokratie, social_media_nachrichtenquelle, fill = geschlecht)) +
geom_violin() +
geom_jitter(aes(zufriedenheit_demokratie, social_media_nachrichtenquelle), position = position_jitter(width = 0.4, height = 0),
alpha = 0.1, size = 0.1, show.legend = F) +
scale_x_discrete(name = "Lebenszufriedenheit") +
scale_y_continuous(name = "Internetnutzung") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
labs(title = "Lebenszufriedenheit nach Internetnutzung ", fill = "Voted")
#ggsave("Internetnutzung_und_Lebenszufriedenheit.pdf")
ggplot(social_media, aes(zufriedenheit_demokratie, social_media_nachrichtenquelle, fill = geschlecht)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
ggplot(social_media, aes(zufriedenheit_demokratie, social_media_nachrichtenquelle, fill = geschlecht)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
>>>>>>> Stashed changes
