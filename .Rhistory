Ver_EU_Par = pt20)
head(allbus_vertrauen)
allbus_vertrauen = daten %>%
select(pt01:pt20) %>%
mutate(across(pt01:pt20, ~ as.numeric(.))) %>%
na.omit()
allbus_vertrauen = allbus_vertrauen %>%
rename(Ver_Gesundheitswesen = pt01,
Ver_BVerfG = pt02,
Ver_Bundestag = pt03,
Ver_Verwaltung = pt04,
Ver_kath_Kirche = pt06,
Ver_evan_Kirche = pt07,
Ver_Justiz = pt08,
Ver_TV = pt09,
Ver_Zeitung = pt10,
Ver_Uni = pt11,
Ver_Regierung = pt12,
Ver_Polizei = pt14,
Ver_Parteien = pt15,
Ver_Kom_EU = pt19,
Ver_EU_Par = pt20)
head(allbus_vertrauen)
allbus_vertrauen = daten %>%
# Wir wählen mit select() die gewünschten Variablen aus
select(pt01:pt20) %>%
# die Kombination aus mutate() und across() ermöglicht es uns die Funktion as.numeric() in einer Zeile auf alle zuvor ausgewählten Variablen anzuwenden
mutate(across(pt01:pt20, ~ as.numeric(.))) %>%
# Wir schmeißen fehlende Werte raus
mutate(across(pt01:pt20, ~ if_else(., -9, NA)))
allbus_vertrauen = daten %>%
# Wir wählen mit select() die gewünschten Variablen aus
select(pt01:pt20) %>%
# die Kombination aus mutate() und across() ermöglicht es uns die Funktion as.numeric() in einer Zeile auf alle zuvor ausgewählten Variablen anzuwenden
mutate(across(pt01:pt20, ~ as.numeric(.))) %>%
# Wir schmeißen fehlende Werte raus
mutate(across(pt01:pt20, ~ if_else(pt01:pt20, -9, NA)))
allbus_vertrauen = daten %>%
# Wir wählen mit select() die gewünschten Variablen aus
select(pt01:pt20) %>%
# die Kombination aus mutate() und across() ermöglicht es uns die Funktion as.numeric() in einer Zeile auf alle zuvor ausgewählten Variablen anzuwenden
mutate(across(pt01:pt20, ~ as.numeric(.))) %>%
# Wir schmeißen fehlende Werte raus
mutate(across(pt01:pt20, ~ if_else(-9, NA,.)))
allbus_vertrauen = daten %>%
# Wir wählen mit select() die gewünschten Variablen aus
select(pt01:pt20) %>%
# die Kombination aus mutate() und across() ermöglicht es uns die Funktion as.numeric() in einer Zeile auf alle zuvor ausgewählten Variablen anzuwenden
mutate(across(pt01:pt20, ~ as.numeric(.))) %>%
# Wir schmeißen fehlende Werte raus
mutate(across(pt01:pt20, ~ if_else("-9", NA,.)))
allbus_vertrauen = daten %>%
# Wir wählen mit select() die gewünschten Variablen aus
select(pt01:pt20) %>%
# die Kombination aus mutate() und across() ermöglicht es uns die Funktion as.numeric() in einer Zeile auf alle zuvor ausgewählten Variablen anzuwenden
mutate(across(pt01:pt20, ~ as.numeric(.))) %>%
# Wir schmeißen fehlende Werte raus
mutate(across(pt01:pt20, ~ if_else(.,-9, NA,.)))
allbus_vertrauen = daten %>%
# Wir wählen mit select() die gewünschten Variablen aus
select(pt01:pt20) %>%
# die Kombination aus mutate() und across() ermöglicht es uns die Funktion as.numeric() in einer Zeile auf alle zuvor ausgewählten Variablen anzuwenden
mutate(across(pt01:pt20, ~ as.numeric(.))) %>%
# Wir schmeißen fehlende Werte raus
mutate(across(pt01:pt20, ~ ifelse(.,-9, NA,.)))
allbus_vertrauen = daten %>%
# Wir wählen mit select() die gewünschten Variablen aus
select(pt01:pt20) %>%
# die Kombination aus mutate() und across() ermöglicht es uns die Funktion as.numeric() in einer Zeile auf alle zuvor ausgewählten Variablen anzuwenden
mutate(across(pt01:pt20, ~ as.numeric(.))) %>%
# Wir schmeißen fehlende Werte raus
mutate(pt01 = ifelse(pt01, -9, NA,.))
allbus_vertrauen = daten %>%
# Wir wählen mit select() die gewünschten Variablen aus
select(pt01:pt20) %>%
# die Kombination aus mutate() und across() ermöglicht es uns die Funktion as.numeric() in einer Zeile auf alle zuvor ausgewählten Variablen anzuwenden
mutate(across(pt01:pt20, ~ as.numeric(.))) %>%
# Wir schmeißen fehlende Werte raus
mutate(pt01 = ifelse(pt01, -9, NA))
View(allbus_vertrauen)
allbus_vertrauen = daten %>%
# Wir wählen mit select() die gewünschten Variablen aus
select(pt01:pt20) %>%
# die Kombination aus mutate() und across() ermöglicht es uns die Funktion as.numeric() in einer Zeile auf alle zuvor ausgewählten Variablen anzuwenden
mutate(across(pt01:pt20, ~ as.numeric(.))) %>%
# Wir schmeißen fehlende Werte raus
mutate(pt01 = ifelse(-9, NA))
allbus_vertrauen = daten %>%
# Wir wählen mit select() die gewünschten Variablen aus
select(pt01:pt20) %>%
# die Kombination aus mutate() und across() ermöglicht es uns die Funktion as.numeric() in einer Zeile auf alle zuvor ausgewählten Variablen anzuwenden
mutate(across(pt01:pt20, ~ as.numeric(.))) %>%
# Wir schmeißen fehlende Werte raus
mutate(pt01 = if_else(-9, NA))
allbus_vertrauen = daten %>%
# Wir wählen mit select() die gewünschten Variablen aus
select(pt01:pt20) %>%
# die Kombination aus mutate() und across() ermöglicht es uns die Funktion as.numeric() in einer Zeile auf alle zuvor ausgewählten Variablen anzuwenden
mutate(across(pt01:pt20, ~ as.numeric(.))) %>%
# Wir schmeißen fehlende Werte raus
mutate(pt01 = if_else(pt01,-9, NA))
allbus_vertrauen = daten %>%
# Wir wählen mit select() die gewünschten Variablen aus
select(pt01:pt20) %>%
# die Kombination aus mutate() und across() ermöglicht es uns die Funktion as.numeric() in einer Zeile auf alle zuvor ausgewählten Variablen anzuwenden
mutate(across(pt01:pt20, ~ as.numeric(.))) %>%
# Wir schmeißen fehlende Werte raus
mutate(pt01 = if_else(pt01 == -9, NA))
?if_else
allbus_vertrauen = daten %>%
# Wir wählen mit select() die gewünschten Variablen aus
select(pt01:pt20) %>%
# die Kombination aus mutate() und across() ermöglicht es uns die Funktion as.numeric() in einer Zeile auf alle zuvor ausgewählten Variablen anzuwenden
mutate(across(pt01:pt20, ~ as.numeric(.))) %>%
# Wir schmeißen fehlende Werte raus
mutate(pt01 = if_else(pt01 == -9, NA, pt01))
allbus_vertrauen = daten %>%
# Wir wählen mit select() die gewünschten Variablen aus
select(pt01:pt20) %>%
# die Kombination aus mutate() und across() ermöglicht es uns die Funktion as.numeric() in einer Zeile auf alle zuvor ausgewählten Variablen anzuwenden
mutate(across(pt01:pt20, ~ as.numeric(.))) %>%
# Wir schmeißen fehlende Werte raus
mutate(pt01 = if_else(pt01 == c(-9, 11, 42), NA, pt01))
allbus_vertrauen = daten %>%
# Wir wählen mit select() die gewünschten Variablen aus
select(pt01:pt20) %>%
# die Kombination aus mutate() und across() ermöglicht es uns die Funktion as.numeric() in einer Zeile auf alle zuvor ausgewählten Variablen anzuwenden
mutate(across(pt01:pt20, ~ as.numeric(.))) %>%
# Wir schmeißen fehlende Werte raus
mutate(pt01 = if_else(pt01 %in% c(-9, 11, 42), NA, pt01))
allbus_vertrauen = daten %>%
# Wir wählen mit select() die gewünschten Variablen aus
select(pt01:pt20) %>%
# die Kombination aus mutate() und across() ermöglicht es uns die Funktion as.numeric() in einer Zeile auf alle zuvor ausgewählten Variablen anzuwenden
mutate(across(pt01:pt20, ~ as.numeric(.))) %>%
# Wir schmeißen fehlende Werte raus
mutate(pt01 = if_else(pt01 %in% c(-9, 11, 42), NA))
allbus_vertrauen = daten %>%
# Wir wählen mit select() die gewünschten Variablen aus
select(pt01:pt20) %>%
# die Kombination aus mutate() und across() ermöglicht es uns die Funktion as.numeric() in einer Zeile auf alle zuvor ausgewählten Variablen anzuwenden
mutate(across(pt01:pt20, ~ as.numeric(.))) %>%
# Wir schmeißen fehlende Werte raus
mutate(pt01 = if_else(pt01 %in% c(-9, 11, 42), NA, 2))
allbus_vertrauen = daten %>%
# Wir wählen mit select() die gewünschten Variablen aus
select(pt01:pt20) %>%
# die Kombination aus mutate() und across() ermöglicht es uns die Funktion as.numeric() in einer Zeile auf alle zuvor ausgewählten Variablen anzuwenden
mutate(across(pt01:pt20, ~ as.numeric(.))) %>%
# Wir schmeißen fehlende Werte raus
mutate(pt01 = if_else(pt01 %in% c(-9, -11, -42), NA, pt01))
allbus_vertrauen = daten %>%
# Wir wählen mit select() die gewünschten Variablen aus
select(pt01:pt20) %>%
# die Kombination aus mutate() und across() ermöglicht es uns die Funktion as.numeric() in einer Zeile auf alle zuvor ausgewählten Variablen anzuwenden
mutate(across(pt01:pt20, ~ as.numeric(.))) %>%
# Wir schmeißen fehlende Werte raus
# mutate(pt01 = if_else(pt01 %in% c(-9, -11, -42), NA, pt01))
mutate(across(pt01:pt20, ~ ifelse(.%in% c(-9, -11, -42), NA,.)))
boxplot(allbus_vertrauen)
# Visuelle Überprüfung
hist(allbus_vertrauen, col='steelblue', main='Normal')
# Visuelle Überprüfung
hist(allbus_vertrauen$pt01, col='steelblue', main='Normal')
# Visuelle Überprüfung
hist(allbus_vertrauen$pt02, col='steelblue', main='Normal')
# Visuelle Überprüfung
hist(allbus_vertrauen$pt03, col='steelblue', main='Normal')
# Visuelle Überprüfung mit einem Q-Q Plot
qqnorm(allbus_vertrauen$pt01, main='Normal')
# Visuelle Überprüfung mit einem Q-Q Plot
qqnorm(allbus_vertrauen$pt01)
qqline(allbus_vertrauen$pt01)
# Visuelle Überprüfung mit einem Histogram
hist(allbus_vertrauen$pt01, col='steelblue', main='Normal')
# Statistische Überprüfung mittels Shapiro Wilk Test
shapiro.test(allbus_vertrauen$pt01)
ggplot(allbus_vertrauen, aes(x = pt01)) +
geom_point()
ggplot(allbus_vertrauen, aes(x = pt01, y = n())) +
geom_point()
ggplot(allbus_vertrauen, aes(x = pt01, y = pt02) +
geom_point()
ggplot(allbus_vertrauen, aes(x = pt01, y = pt02) +
ggplot(allbus_vertrauen, aes(x = pt01, y = pt02)) +
geom_point()
ggplot(allbus_vertrauen, aes(x = pt01, y = pt02)) +
geom_point() +
geom_abline()
# Visuelle Überprüfung mit einem Histogram für die erste Variable (pt01)
hist(allbus_vertrauen$pt01, col='steelblue')
# Visuelle Überprüfung mit einem Streudiagramm für die ersten beiden Variable (pt01 und pt02)
ggplot(allbus_vertrauen, aes(x = pt01, y = pt02)) +
geom_point() +
geom_abline()
ggplot(allbus_vertrauen, aes(x = pt01, y = pt02)) +
geom_point() +
geom_abline(linetype = "dashed", color = "steelblue")
ggplot(allbus_vertrauen, aes(x = pt01, y = pt02)) +
geom_point() +
geom_abline(linetype = "dashed", color = "steelblue", size = 1)
# Visuelle Überprüfung mit einem Streudiagramm für die ersten beiden Variable (pt01 und pt02)
ggplot(allbus_vertrauen, aes(x = pt01, y = pt02)) +
geom_point() +
geom_abline(linetype = "dashed", color = "darkgreen", size = 1)
# Visuelle Überprüfung mit einem Histogram für die erste Variable (pt01)
hist(allbus_vertrauen$pt01, col='darkgreen')
?factanal
?factanal
Additionally, the interpretation of factor loadings differs between orthogonal and oblique rotations. For orthogonal solutions, the factor loadings can be interpreted as correlations between common factors and measured variables. These correlations range from −1.00 to +1.00 and the proportion of variance in a measured variable that was contributed by a common factor can be computed by squaring the factor loading. In contrast, oblique solutions produce two different types of factor loadings: structure and pattern coefficients. Structure coefficients can also be interpreted as correlations between common factors and the measured variables. In contrast, pattern coefficients are no longer simple factor-variable correlations; rather, they are similar to standardized partial regression coefficients. That is, they are correlations between common factors and measured variables after controlling for (partialing out) the influence of all other common factors. Accordingly, pattern coefficients might exceed \|1.00\| and cannot be squared to obtain the proportion of variance uniquely contributed by a common factor. Unfortunately, rotation allows "an infinite number of alternative orientations of the common factors (or principal components) in multidimensional space" (Fabrigar & Wegener, 2012, p. 67). For example, the 24° orthogonal rotation illustrated in Figure 1 could have been 20° or 30° or 70.89°, etc. Thus, there is no unique rotational solution for any EFA model.
?nfactors
nfactors(allbus_vertrauen, rotate = "varimax", fm="MLE")
factanal(data = allbus_vertrauen, factors = 1, rotation = "varimax")
factanal(allbus_vertrauen, factors = 1, rotation = "varimax")
fit = factanal(allbus_vertrauen, factors = 1, rotation = "varimax")
factanal(data = allbus_vertrauen, factors = 1, rotation = "varimax")
factanal(allbus_vertrauen, factors = 1, rotation = "varimax")
View(allbus_vertrauen)
allbus_vertrauen = allbus_vertrauen %>%
# Wir codieren die unterschiedlichen fehlenden Werte um (aus der Allbus-Dokumentation entnommen)
mutate(across(pt01:pt20, ~ ifelse(.%in% c(-9, -11, -42), NA,.))) %>%
# Wir schmeißen fehlende Werte raus
na.omit()
factanal(allbus_vertrauen, factors = 1, rotation = "varimax")
fit = factanal(allbus_vertrauen, factors = 1, rotation = "varimax")
# Wir führen die Faktorenanalyse aus und speichern die Ergebnisse in dem Objekt fit ab
fit = factanal(allbus_vertrauen, factors = 1, rotation = "varimax")
# Anzeigen der Ergebnisse mit 2 Nachkommastellen und dem Ausblenden von Faktorladungen die kleiner als 0.3 sind
print(fit, digits = 2, cutoff = .3)
KMO(allbus_vertrauen)
cortest.bartlett(allbus_vertrauen)
?factanal
# Wir führen die Faktorenanalyse aus und speichern die Ergebnisse in dem Objekt fit ab
fit =  fa(allbus_vertrauen, factors = 1, fm = "ml", rotation = "varimax")
# Anzeigen der Ergebnisse mit 2 Nachkommastellen und dem Ausblenden von Faktorladungen die kleiner als 0.3 sind
print(fit, digits = 2, cutoff = .3)
fit$e.values
print(fit$e.values, digits = 2)
print(fit$uniquenesses, digits = 2)
get_eigenvalue(fit)
summary(fit)
summary(fit$e.values)
summary(fit$model)
print(fit$values, digits = 2)
sum(fit$values)
print(fit$values, digits = 2)
# Wir führen die Faktorenanalyse aus und speichern die Ergebnisse in dem Objekt fit ab
fit =  fa(allbus_vertrauen, factors = 1, fm = "ml", rotation = "varimax")
# Anzeigen der Ergebnisse mit 2 Nachkommastellen und dem Ausblenden von Faktorladungen die kleiner als 0.3 sind
print(fit, digits = 2, cutoff = .3)
# Visuelle Überprüfung mit einem Histogram für die erste Variable (pt01)
hist(allbus_vertrauen$pt01, col='darkgreen')
ggplot(allbus_vertrauen, aes(x = pt01, y = pt02)) +
geom_hist()
library(ggplot2)
ggplot(allbus_vertrauen, aes(x = pt01, y = pt02)) +
geom_hist()
ggplot(allbus_vertrauen, aes(x = pt01, y = pt02)) +
geom_histogram()
ggplot(allbus_vertrauen, aes(x = pt01)) +
geom_histogram()
ggplot(allbus_vertrauen, aes(x = pt01)) +
geom_histogram(col='darkgreen')
# Visuelle Überprüfung mit einem Histogram für die erste Variable (pt01)
ggplot(allbus_vertrauen, aes(x = Ver_Gesundheitswesen, fill = Ver_Gesundheitswesen)) +
geom_histogram() +
scale_fill_manual("darkgreen")
# Visuelle Überprüfung mit einem Histogram für die erste Variable (pt01)
ggplot(allbus_vertrauen, aes(x = Ver_Gesundheitswesen, fill = Ver_Gesundheitswesen)) +
geom_histogram() +
scale_fill_brewer(palette = "Greens")
View(allbus_vertrauen)
allbus_vertrauen = allbus_vertrauen %>%
# mit dem rename() Befehl können wir die Variablen umbennen
rename(Ver_Gesundheitswesen = pt01,
Ver_BVerfG = pt02,
Ver_Bundestag = pt03,
Ver_Verwaltung = pt04,
Ver_kath_Kirche = pt06,
Ver_evan_Kirche = pt07,
Ver_Justiz = pt08,
Ver_TV = pt09,
Ver_Zeitung = pt10,
Ver_Uni = pt11,
Ver_Regierung = pt12,
Ver_Polizei = pt14,
Ver_Parteien = pt15,
Ver_Kom_EU = pt19,
Ver_EU_Par = pt20)
library(psych)
library(psy)
library(nFactors)
library(tidyverse)
library(ggplot2)
library(haven)
daten = haven::read_dta("Datensatz/Allbus_2021.dta")
allbus_vertrauen = daten %>%
# Wir wählen mit select() die gewünschten Variablen aus
select(pt01:pt20) %>%
# die Kombination aus mutate() und across() ermöglicht es uns die Funktion as.numeric() in einer Zeile auf alle zuvor ausgewählten Variablen anzuwenden
mutate(across(pt01:pt20, ~ as.numeric(.))) %>%
# Wir codieren die unterschiedlichen fehlenden Werte um (aus der Allbus-Dokumentation entnommen)
mutate(across(pt01:pt20, ~ ifelse(.%in% c(-9, -11, -42), NA,.))) %>%
# Wir schmeißen fehlende Werte raus
na.omit()
allbus_vertrauen = allbus_vertrauen %>%
# mit dem rename() Befehl können wir die Variablen umbennen
rename(Ver_Gesundheitswesen = pt01,
Ver_BVerfG = pt02,
Ver_Bundestag = pt03,
Ver_Verwaltung = pt04,
Ver_kath_Kirche = pt06,
Ver_evan_Kirche = pt07,
Ver_Justiz = pt08,
Ver_TV = pt09,
Ver_Zeitung = pt10,
Ver_Uni = pt11,
Ver_Regierung = pt12,
Ver_Polizei = pt14,
Ver_Parteien = pt15,
Ver_Kom_EU = pt19,
Ver_EU_Par = pt20)
head(allbus_vertrauen)
# Visuelle Überprüfung mit einem Histogram für die erste Variable (pt01)
ggplot(allbus_vertrauen, aes(x = Ver_Gesundheitswesen, fill = Ver_Gesundheitswesen)) +
geom_histogram() +
scale_fill_brewer(palette = "Greens")
# Visuelle Überprüfung mit einem Histogram für die erste Variable (pt01)
ggplot(allbus_vertrauen, aes(x = Ver_Gesundheitswesen, fill = Ver_Gesundheitswesen)) +
geom_histogram() +
scale_fill_brewer(palette = "Set1")
# Visuelle Überprüfung mit einem Histogram für die erste Variable (pt01)
ggplot(allbus_vertrauen, aes(x = Ver_Gesundheitswesen, fill = Ver_Gesundheitswesen)) +
geom_histogram(binwidth = 0.5) +
scale_fill_brewer(palette = "Set1")
# Visuelle Überprüfung mit einem Histogram für die erste Variable (pt01)
ggplot(allbus_vertrauen, aes(x = as.factor(Ver_Gesundheitswesen), fill = Ver_Gesundheitswesen)) +
geom_histogram(binwidth = 0.5) +
scale_fill_brewer(palette = "Set1")
# Visuelle Überprüfung mit einem Histogram für die erste Variable (pt01)
ggplot(allbus_vertrauen, aes(x = as.factor(Ver_Gesundheitswesen), fill = as.factor(Ver_Gesundheitswesen))) +
geom_histogram(binwidth = 0.5) +
scale_fill_brewer(palette = "Set1")
# Visuelle Überprüfung mit einem Histogram für die erste Variable (pt01)
ggplot(allbus_vertrauen, aes(x = Ver_Gesundheitswesen, fill = colors("Greens"))) +
geom_histogram(binwidth = 0.5) +
scale_fill_brewer()
# Visuelle Überprüfung mit einem Histogram für die erste Variable (pt01)
colors = c(rep("darkgreen", 15))
ggplot(allbus_vertrauen, aes(x = Ver_Gesundheitswesen, fill = colors)) +
geom_histogram(binwidth = 0.5)
# Visuelle Überprüfung mit einem Histogram für die erste Variable (pt01)
colors = c(rep("darkgreen", 15))
ggplot(allbus_vertrauen, aes(x = Ver_Gesundheitswesen)) +
geom_histogram(binwidth = 0.5, , fill = colors)
# Visuelle Überprüfung mit einem Histogram für die erste Variable (pt01)
colors = c(rep("darkgreen", 15))
ggplot(allbus_vertrauen, aes(x = Ver_Gesundheitswesen)) +
geom_histogram(binwidth = 0.5, fill = colors)
# Visuelle Überprüfung mit einem Histogram für die erste Variable (pt01)
colors = c(rep("darkgreen", 1))
ggplot(allbus_vertrauen, aes(x = Ver_Gesundheitswesen)) +
geom_histogram(binwidth = 0.5, fill = colors)
index_vertrauen = allbus_vertrauen %>%
mutate(vertrauen_ges_inst = Ver_Gesundheitswesen + Ver_BVerfG + Ver_Bundestag + Ver_Verwaltung + Ver_kath_Kirche + Ver_evan_Kirche + Ver_Justiz+ Ver_TV +  Ver_Zeitung + Ver_Uni + Ver_Regierung + Ver_Polizei + Ver_Parteien + Ver_Kom_EU + Ver_EU_Par)
head(index_vertrauen)
summary(index_vertrauen)
index_vertrauen = allbus_vertrauen %>%
mutate(vertrauen_ges_inst = Ver_Gesundheitswesen + Ver_BVerfG + Ver_Bundestag + Ver_Verwaltung + Ver_kath_Kirche + Ver_evan_Kirche + Ver_Justiz+ Ver_TV +  Ver_Zeitung + Ver_Uni + Ver_Regierung + Ver_Polizei + Ver_Parteien + Ver_Kom_EU + Ver_EU_Par)
head(index_vertrauen)
index_vertrauen = allbus_vertrauen %>%
mutate(vertrauen_ges_inst = (Ver_Gesundheitswesen + Ver_BVerfG + Ver_Bundestag + Ver_Verwaltung + Ver_kath_Kirche + Ver_evan_Kirche + Ver_Justiz+ Ver_TV +  Ver_Zeitung + Ver_Uni + Ver_Regierung + Ver_Polizei + Ver_Parteien + Ver_Kom_EU + Ver_EU_Par) / 15)
head(index_vertrauen)
summary(index_vertrauen$vertrauen_ges_inst)
index_vertrauen %>%
select(Ver_Gesundheitswesen:Ver_EU_Par) %>%
psych::alpha(check.keys=TRUE)
# Visuelle Überprüfung mit einem Streudiagramm für die ersten beiden Variable (Ver_Gesundheitswesen und Ver_BVerfG)
ggplot(allbus_vertrauen, aes(x = Ver_Gesundheitswesen, y = Ver_BVerfG)) +
geom_point() +
geom_abline(linetype = "dashed", color = "darkgreen", size = 1)
htmlTable(summary(allbus_vertrauen))
if(!require("pacman")) {install.packages("pacman");library(pacman)}
p_load(tidyverse, ggplot2, haven, psych, psy, nFactors)
# Wir überprüfen kurz, ob die Umbenennung geklappt hat und lassen uns die ersten Zeilen des Datensatzes anzeigen
htmlTable(head(allbus_vertrauen))
p_load(tidyverse, ggplot2, haven, psych, psy, nFactors, htmltable)
p_load(tidyverse, ggplot2, haven, psych, psy, nFactors, htmlTable)
# Wir überprüfen kurz, ob die Umbenennung geklappt hat und lassen uns die ersten Zeilen des Datensatzes anzeigen
htmlTable(head(allbus_vertrauen))
htmlTable(summary(allbus_vertrauen))
htmlTable(index_vertrauen %>%
select(Ver_Gesundheitswesen:Ver_EU_Par) %>%
psych::alpha(check.keys=TRUE))
index_vertrauen %>%
select(Ver_Gesundheitswesen:Ver_EU_Par) %>%
psych::alpha(check.keys=TRUE)
install.packages("tidyr")
vignette("tidyr")
vignette("dplyr")
R.home(component = "home")
.rs.restartR()
??dplyr
?dplyr
?mean()
iris %>%
str()
library(tidyverse)
iris %>%
str()
iris %>%
mean(Sepal.Length)
iris %>%
str()
mtcars %>%
str()
mtcars %>%
mean(hp)
mtcars %>%
mean(.,hp)
mtcars %>%
mean(hp, na.rm = T)
mtcars %>%
mean(.$hp, na.rm = T)
mtcars %>%
mean(.$hp)
mean(mtcars$hp)
mtcars %>%
mean(hp)
mtcars %>%
select(hp) %>%
mean()
mtcars %>%
select(hp) %>%
mean(.)
mtcars %>%
select(hp) %>%
mean(.)
mtcars %>%
select(hp)
mtcars %>%
select(hp) %>%
mean(.)
mtcars %>%
select(hp) %>%
mean(.$hp)
mtcars %>%
pull(hp) %>%
mean()
mtcars %>%
select(hp) %>%
mean()
mtcars %>%
pull(hp) %>%
mean()
mtcars %>%
select(hp)
mtcars %>%
select(hp) %>%
str()
mtcars %>%
select(hp) %>%
mean()
mtcars %>%
pull(hp) %>%
mean()
mtcars %>%
summarize(mean(hp))
mtcars %>%
summarize()
mtcars %>%
summarize(mean)
mtcars %>%
summarize(Mittelwert = mean(hp))
data %>%
str() %>%
summarize(mean (hp))
data %>%
str() %>%
summarize(mean(hp))
data %>%
summarize(mean(hp)) %>%
str()
data %>%
summarize(mean(hp))
mtcars %>%
str() %>%
summarize(mean(hp))
mtcars %>%
str() %>%
pull(hp) %>%
mean()
mtcars %>%
pull(hp) %>%
mean() %>%
str() %>%
mean(mtcars$hp)
head(vertrauen_institutionen$age) # <1>
vertrauen_institutionen <- daten %>%
select(age, pt01, pt02, pt03, pt04, pt06, pt07, pt08, pt09, pt10, pt11, pt12, pt14, pt15, pt19, pt20)
library(pacman)
p_load(haven,tidyr,dplyr)
daten <- read_dta("Datensatz/Allbus_2021.dta")
vertrauen_institutionen <- daten %>%
select(age, pt01, pt02, pt03, pt04, pt06, pt07, pt08, pt09, pt10, pt11, pt12, pt14, pt15, pt19, pt20)
head(vertrauen_institutionen$age) # <1>
View(vertrauen_institutionen)
vertrauen_institutionen$age # <1>
options(max.print = 100)
vertrauen_institutionen$age # <1>
options(max.print = 100)
vertrauen_institutionen$age
