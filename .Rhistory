ggtitle("Vorhergesagte Werte und Residuen für Alter und Fernsehnutzung") + # Titel
xlab("Alter") + ylab("tägliche Fernsehnutzung (Minuten)") # Achsen-Beschriftung
ggplot(daten, aes(Alter, TV_Konsum)) +
geom_point(aes(color = residuen))
class(daten$residuen)
daten$residuen <- as.numeric(residuals(model))
ggplot(daten, aes(Alter, TV_Konsum)) +
geom_point(aes(color = residuen)) + # Festlegung der Farbmarkierung für die Residuen (Punkte sind tatsächliche Werte, Linien die Residuen, Farbe gibt Größe der Abweichung an)
scale_color_gradient2(low = "blue", mid = "white", high = "red") + # Festlegung der Farbe für die Residuen
guides(color = "none") + # Unterdrückt eine Legende an der Seite (ist obligatorisch)
geom_point(aes(y = vorhersage), shape = 1) + # gibt die vorhergesagten Punkte auf der Regressionsgeraden aus
geom_smooth(method = "lm", formula = "y ~ x", se = FALSE, linewidth = 0.5, color = "black") + # gibt die Regressionsgerade als Linie aus
geom_segment(aes(xend = Alter, yend = vorhersage), alpha = .2) + # zeichnet die Linie vom Punkt zur Regressionsgeraden transparent ein
ggtitle("Vorhergesagte Werte und Residuen für Alter und Fernsehnutzung") + # Titel
xlab("Alter") + ylab("tägliche Fernsehnutzung (Minuten)") # Achsen-Beschriftung
LillieTest(daten$trustges)
if(!require("pacman")) {install.packages("pacman");library(pacman)}
p_load(knitr,car, tidyverse, ggplot2, DescTools, dplyr,afex, emmeans, PMCMRplus)
daten = haven::read_dta("Datensatz/Allbus_2021.dta")
theme_set(theme_classic())
daten <- daten %>%
filter(., hs01 > 0 & pt01 > 0 & age > 0) %>%
rename(., gesund = hs01,
trustges = pt01) %>%
mutate(gesund = haven::as_factor(gesund),
trustges = as.numeric(trustges),
agef = dicho(age, as.num = T) %>% factor(levels = c(0,1), labels = c("jung", "alt")))
p_load(knitr,car, tidyverse, ggplot2, DescTools, dplyr,afex, emmeans, PMCMRplus, sjmisc)
daten <- daten %>%
filter(., hs01 > 0 & pt01 > 0 & age > 0) %>%
rename(., gesund = hs01,
trustges = pt01) %>%
mutate(gesund = haven::as_factor(gesund),
trustges = as.numeric(trustges),
agef = dicho(age, as.num = T) %>% factor(levels = c(0,1), labels = c("jung", "alt")))
#Histogramm ausgeben
ggplot(daten, aes(trustges)) +
geom_histogram(aes(y = ..count..),
color = "black", fill = "grey",
binwidth = 1) +
labs(x = "Vertrauen in das Gesundheitswesen",
y = "")
#Histogramm ausgeben
ggplot(daten, aes(trustges)) +
geom_histogram(aes(y = after_stat(count)),
color = "black", fill = "grey",
binwidth = 1) +
labs(x = "Vertrauen in das Gesundheitswesen",
y = "")
LillieTest(daten$trustges)
shapiro.test(daten$trustges)
#Levene-Test für einfaktorielle Varianzanalyse
daten %>%
leveneTest(trustges ~ gesund, data = ., center = mean) #<1>
#Levene-Test für mehrfaktorielle Varianzanalyse ausgeben
daten %>%
leveneTest(trustges ~ gesund*agef, data = ., center = mean) #<2>
daten %>%
group_by(gesund) %>%
summarise(Mittelwert = mean(trustges, na.rm = T),
Standardabweichung = sd(trustges, na.rm = T)) %>%
kable(digits = 2, col.names = c("Gesundheitszustand", "M", "SD"), caption = "Descriptives Vertrauen")
daten %>%
group_by(gesund) %>%
summarise(Mittelwert = mean(trustges, na.rm = T),
Standardabweichung = sd(trustges, na.rm = T)) %>%
kable(digits = 2, col.names = c("Gesundheitszustand", "M", "SD"), caption = "Descriptives Vertrauen")
#Tukey Post-Hoc Test
emmeans::emmeans(fit, specs = "gesund") %>%
pairs()
#Einfaktorielle ANOVA
fit <- daten %>%
aov_car(trustges ~ gesund + Error(respid), data = ., anova_table = "pes") #<1>
print(fit)
#Tukey Post-Hoc Test
emmeans::emmeans(fit, specs = "gesund") %>%
pairs()
#Tamhame T2 Test
daten %>%
aov(trustges ~ gesund, data = .) %>%
tamhaneT2Test(.)
#Deskriptive Statistiken ausgeben
daten %>%
group_by(gesund, agef) %>%
summarise(Mittelwert = mean(trustges, na.rm = T),
Standardabweichung = SD(trustges, na.rm = T)) %>%
kable(digits = 2, col.names = c("Gesundheitszustand", "Alter", "M", "SD"), caption = "Descriptives Vertrauen")
#Tukey Post-Hoc Test
emmeans::emmeans(fit2, specs = c("gesund", "agef")) %>%
pairs()
fit2 <- daten %>%
afex::aov_car(trustges ~ gesund * agef + Error(respid),
data = ., anova_table = "pes")
print(fit2)
#Tukey Post-Hoc Test
emmeans::emmeans(fit2, specs = c("gesund", "agef")) %>%
pairs()
#Interaktionsplot ausgeben
emmip(fit2, agef ~ gesund) +
labs(title = "Geschätzes Randmittel von Vertrauen in das Gesundheitswesen",
y = "Geschätzte Randmittel",
x = "Alter der Befragten")
emmip(fit2, gesund ~ agef) +
labs(title = "Geschätzes Randmittel von Vertrauen in das Gesundheitswesen",
y = "Geschätzte Randmittel",
x = "Gesundheitszustand")
daten %>%
group_by(gesund) %>% #<1>
summarise(Mittelwert = mean(trustges, na.rm = T), #<1>
Standardabweichung = sd(trustges, na.rm = T)) %>%
kable(digits = 2, col.names = c("Gesundheitszustand", "M", "SD"), caption = "Descriptives Vertrauen") #<2>
daten %>%
ggline(x= gesund,
y = trustges,
add = "mean_ci",
labs = "Gesundheitszustand", "Vertrauen", "Vertrauen in das Gesundheitswesen")
if(!require("pacman")) {install.packages("pacman");library(pacman)}
p_load(knitr,car, tidyverse, ggplot2, ggpubr DescTools, dplyr,afex, emmeans, PMCMRplus, sjmisc)
if(!require("pacman")) {install.packages("pacman");library(pacman)}
p_load(knitr,car, tidyverse, ggplot2, ggpubr, DescTools, dplyr,afex, emmeans, PMCMRplus, sjmisc)
daten %>%
ggline(x= gesund,
y = trustges,
add = "mean_ci",
labs = "Gesundheitszustand", "Vertrauen", "Vertrauen in das Gesundheitswesen")
daten %>%
ggline(x= "gesund",
y = "trustges",
add = "mean_ci",
labs = "Gesundheitszustand", "Vertrauen", "Vertrauen in das Gesundheitswesen")
daten %>%
ggline(x= "trustges",
y = "gesund",
add = "mean_ci",
labs = "Gesundheitszustand", "Vertrauen", "Vertrauen in das Gesundheitswesen")
class(daten$gesund)
daten %>%
ggline(x= "gesund",
y = "trustges",
add = "mean_ci",
labs = "Gesundheitszustand", "Vertrauen", "Vertrauen in das Gesundheitswesen")
?ggpubr::ggline
daten %>%
ggline(x= "gesund",
y = "trustges",
add = "mean_ci",
labs = "Gesundheitszustand", "Vertrauen", "Vertrauen in das Gesundheitswesen",
numeric.x.axis = T)
daten %>%
ggline(x= "gesund",
y = "trustges",
add = "mean_ci",
labs = "Gesundheitszustand", "Vertrauen", "Vertrauen in das Gesundheitswesen",
numeric.x.axis = F)
daten %>%
ggline(x= "gesund",
y = "trustges",
add = "mean_ci",
numeric.x.axis = F)
daten %>%
ggline(x= "gesund",
y = "trustges",
add = "mean_ci",
title = "Vertrauen in das Gesundheitswesen",
xlab = "Gesundheitszustand",
ylab = "Vertrauen in das Gesundheitswesen")
daten %>%
ggline(x= "gesund",
y = "trustges",
add = "mean_ci",
title = "Vertrauen in das Gesundheitswesen",
xlab = "Gesundheitszustand",
ylab = "Vertrauen in das Gesundheitswesen") +
rotate_x_text(45)
daten %>%
ggline(x= "gesund",
y = "trustges",
add = "mean_ci",
title = "Vertrauen in das Gesundheitswesen",
xlab = "Gesundheitszustand",
ylab = "Vertrauen in das Gesundheitswesen") +
rotate_x_text()
daten %>%
ggline(x= "gesund",
y = "trustges",
add = "mean_ci",
title = "Vertrauen in das Gesundheitswesen",
xlab = "Gesundheitszustand",
ylab = "Vertrauen in das Gesundheitswesen") +
rotate_x_text(20)
daten %>%
ggline(x= "gesund",
y = "trustges",
add = "mean_ci",
title = "Vertrauen in das Gesundheitswesen",
xlab = "Gesundheitszustand",
ylab = "Vertrauen in das Gesundheitswesen") +
rotate_x_text(45)
p_load(tidyverse, haven, dplyr)
if(!require("pacman")) {install.packages("pacman");library(pacman)}
p_load(tidyverse, haven, dplyr)
daten = haven::read_dta("Datensatz/Allbus_2021.dta")
daten_neu <- daten %>%
rename(TV_Konsum = lm02)%>%
rename(TV_Vertrauen= pt09)%>%
filter(between(TV_Konsum, 0, 1500))%>%
filter(between(TV_Vertrauen, 1, 7))
korrelation <- daten_neu %>%
summarize(correlation = cor(TV_Konsum, TV_Vertrauen, use = "complete.obs"))
print(korrelation)
scatterplot <- ggplot(daten_neu, aes(x = TV_Konsum, y = TV_Vertrauen)) +
geom_point(color = "blue") +
labs(x = "TV Konsum", y = "TV Vertrauen", title = "Korrelation zwischen TV Konsum und Vertrauen")
print(scatterplot)
scatterplot <- ggplot(daten_neu, aes(x = TV_Konsum, y = TV_Vertrauen)) +
geom_point(color = "deepgreen") +
labs(x = "TV Konsum", y = "TV Vertrauen", title = "Korrelation zwischen TV Konsum und Vertrauen")
print(scatterplot)
korrelation <- daten_neu %>%
summarize(correlation = cor(TV_Konsum, TV_Vertrauen, use = "complete.obs"))
print(korrelation)
daten_neu <- daten %>%
rename(TV_Konsum = lm02)%>%
rename(TV_Vertrauen= pt09)%>%
filter(between(TV_Konsum, 0, 1500))%>%
filter(between(TV_Vertrauen, 1, 7))
scatterplot <- ggplot(daten_neu, aes(x = TV_Konsum, y = TV_Vertrauen)) +
geom_point(color = "deepgreen") +
labs(x = "TV Konsum", y = "TV Vertrauen", title = "Korrelation zwischen TV Konsum und Vertrauen")
print(scatterplot)
scatterplot <- ggplot(daten_neu, aes(x = TV_Konsum, y = TV_Vertrauen)) +
geom_point(color = "darkgreen") +
labs(x = "TV Konsum", y = "TV Vertrauen", title = "Korrelation zwischen TV Konsum und Vertrauen")
scatterplot <- ggplot(daten_neu, aes(x = TV_Konsum, y = TV_Vertrauen)) +
geom_point(color = "darkgreen") +
labs(x = "TV Konsum", y = "TV Vertrauen", title = "Korrelation zwischen TV Konsum und Vertrauen")
print(scatterplot)
if(!require("pacman")) {install.packages("pacman");library(pacman)}
p_load(tidyverse, haven, dplyr)
theme_set(theme_classic())
scatterplot <- ggplot(daten_neu, aes(x = TV_Konsum, y = TV_Vertrauen)) +
geom_point(color = "darkgreen") +
labs(x = "TV Konsum", y = "TV Vertrauen", title = "Korrelation zwischen TV Konsum und Vertrauen")
print(scatterplot)
if(!require("pacman")) {install.packages("pacman");library(pacman)}
p_load(tidyverse, haven, dplyr)
theme_set(theme_classic())
daten = haven::read_dta("Datensatz/Allbus_2021.dta")
daten_neu <- daten %>%
rename(TV_Konsum = lm02)%>%
rename(TV_Vertrauen= pt09)%>%
filter(between(TV_Konsum, 0, 1500))%>%
filter(between(TV_Vertrauen, 1, 7))
korrelation <- daten_neu %>%
summarize(correlation = cor(TV_Konsum, TV_Vertrauen, use = "complete.obs"))
print(korrelation)
scatterplot <- ggplot(daten_neu, aes(x = TV_Konsum, y = TV_Vertrauen)) +
geom_point(color = "darkgreen") +
labs(x = "TV Konsum", y = "TV Vertrauen", title = "Korrelation zwischen TV Konsum und Vertrauen")
print(scatterplot)
daten_neu2 <- daten %>%
rename(TV_Konsum = lm02)%>%
rename(Kriminalitätsprognose= cf03)%>%
filter(between(TV_Konsum, 0, 1500))%>%
filter(between(Kriminalitätsprognose, 1, 5))
korrelation <- daten_neu2 %>%
summarize(correlation = cor(TV_Konsum, Kriminalitätsprognose, use = "complete.obs"))
print(korrelation)
scatterplot <- ggplot(daten_neu2, aes(x = TV_Konsum, y = Kriminalitätsprognose)) +
geom_point(color = "darkgreen") +
labs(x = "TV Konsum", y = "Kriminalitätsprognose", title = "Korrelation zwischen TV Konsum und Kriminalitätsprognose")
print(scatterplot)
if(!require("pacman")) {install.packages("pacman");library(pacman)}
p_load(tidyverse, haven, dplyr, broom, lm.beta, performance, see)
theme_set(theme_minimal()) # <1>
options(scipen = 999)  # <2>
daten = haven::read_dta("Datensatz/Allbus_2021.dta")
daten <- daten %>%
rename(Alter = age)%>%
rename(TV_Konsum = lm02)%>%
filter(between(Alter, 18, 100))%>%
filter(between(TV_Konsum, 0, 1500))
ggplot(daten, aes(Alter, TV_Konsum)) +
geom_point() +
geom_smooth(method = lm, formula = "y ~ x") +
ggtitle("Zusammenhang der Variablen Alter und TV_Konsum") +
xlab("TV_Konsum") + ylab("Alter")
model <- lm(TV_Konsum ~ Alter, data = daten)
print(model)
summary(model)
predict.lm(model, data.frame(Alter = 25))
predict.lm(model, data.frame(Alter = 75))
predict.lm(model, data.frame(Alter = c(20, 30, 40, 50, 60, 70)))
head(fitted(model), 100)
head(residuals(model), 100)
daten$vorhersage <- predict(model)
daten$residuen <- as.numeric(residuals(model))
ggplot(daten, aes(Alter, TV_Konsum)) +
geom_point(aes(color = residuen)) + # <1>
scale_color_gradient2(low = "blue", mid = "white", high = "red") + # <2>
guides(color = "none") +  # <3>
geom_point(aes(y = vorhersage), shape = 1) + # <4>
geom_smooth(method = "lm", formula = "y ~ x", se = FALSE, linewidth = 0.5, color = "black") + # <5>
geom_segment(aes(xend = Alter, yend = vorhersage), alpha = .2) + # <6>
ggtitle("Vorhergesagte Werte und Residuen für Alter und Fernsehnutzung") + # <7>
xlab("Alter") + ylab("tägliche Fernsehnutzung (Minuten)") # <8>
ggplot(daten, aes(Alter, TV_Konsum)) +
geom_point(aes(color = residuen)) + # <1>
scale_color_gradient2(low = "tan4", mid = "white", high = "darkgreen") + # <2>
guides(color = "none") +  # <3>
geom_point(aes(y = vorhersage), shape = 1) + # <4>
geom_smooth(method = "lm", formula = "y ~ x", se = FALSE, linewidth = 0.5, color = "black") + # <5>
geom_segment(aes(xend = Alter, yend = vorhersage), alpha = .2) + # <6>
ggtitle("Vorhergesagte Werte und Residuen für Alter und Fernsehnutzung") + # <7>
xlab("Alter") + ylab("tägliche Fernsehnutzung (Minuten)") # <8>
vorhersagen <- predict(model)
residuen <- residuals(model)
plot(vorhersagen, residuen, # <1>
xlab = "Vorhersagen", ylab = "Residuen", # <1>
main = "Residualplot", pch = 16, col = "blue") # <1>
abline(h = 0, col = "red", lty = 2)  # <2>
ggplot(daten, aes(Alter, TV_Konsum)) +
geom_point() +
geom_smooth(method = lm, formula = "y ~ x", color = "darkgreen") +
ggtitle("Zusammenhang der Variablen Alter und TV_Konsum") +
xlab("TV_Konsum") + ylab("Alter")
ggplot(daten, aes(Alter, TV_Konsum)) +
geom_point() +
geom_smooth(method = lm, formula = "y ~ x", color = "tan4") +
ggtitle("Zusammenhang der Variablen Alter und TV_Konsum") +
xlab("TV_Konsum") + ylab("Alter")
ggplot(daten, aes(Alter, TV_Konsum)) +
geom_point() +
geom_smooth(method = lm, formula = "y ~ x", color = "tan") +
ggtitle("Zusammenhang der Variablen Alter und TV_Konsum") +
xlab("TV_Konsum") + ylab("Alter")
ggplot(daten, aes(Alter, TV_Konsum)) +
geom_point() +
geom_smooth(method = lm, formula = "y ~ x", color = "lightgreen") +
ggtitle("Zusammenhang der Variablen Alter und TV_Konsum") +
xlab("TV_Konsum") + ylab("Alter")
if(!require("pacman")) {install.packages("pacman");library(pacman)}
p_load(tidyverse, haven, psych, conflicted, dplyr, lsr, ggpubr)
theme_set(theme_classic())
conflicts_prefer(dplyr::filter)
daten = haven::read_dta("Datensatz/Allbus_2021.dta")
daten <- daten %>%
rename(Konfession = rd01)%>%
filter(between(Konfession, 1, 6))%>%
filter(between(sex, 1, 3))
kreuztabelle <- table(daten$sex, daten$Konfession)
print(kreuztabelle)
library(ggplot2)
daten$Konfession <- as.factor(daten$Konfession)
daten$sex <- as.factor(daten$sex)
ggplot(daten, aes(x = Konfession, fill = sex)) +
geom_bar(position = "fill") +
labs(title = "Verteilung der Konfessionszugehörigkeit nach Geschlecht",
x = "Einkommensgruppe", y = "Anteil") +
scale_fill_manual(values = c("darkseagreen","grey", "lightblue"))
library(ggplot2)
daten$Konfession <- haven::as_factor(daten$Konfession)
daten$sex <- haven::as_factor(daten$sex)
ggplot(daten, aes(x = Konfession, fill = sex)) +
geom_bar(position = "fill") +
labs(title = "Verteilung der Konfessionszugehörigkeit nach Geschlecht",
x = "Einkommensgruppe", y = "Anteil") +
scale_fill_manual(values = c("darkseagreen","grey", "lightblue"))
library(ggplot2)
daten$Konfession <- haven::as_factor(daten$Konfession)
daten$sex <- haven::as_factor(daten$sex)
ggplot(daten, aes(x = Konfession, fill = sex)) +
geom_bar(position = "fill") +
labs(title = "Verteilung der Konfessionszugehörigkeit nach Geschlecht",
x = "Einkommensgruppe", y = "Anteil") +
scale_fill_manual(values = c("darkseagreen","grey", "lightblue"))
daten <- daten %>%
mutate(Konfession = haven::as_factor(Konfession),
sex = haven::as_factor(sex))
ggplot(daten, aes(x = Konfession, fill = sex)) +
geom_bar(position = "fill") +
labs(title = "Verteilung der Konfessionszugehörigkeit nach Geschlecht",
x = "Einkommensgruppe", y = "Anteil") +
scale_fill_manual(values = c("darkseagreen","grey", "lightblue"))
if(!require("pacman")) {install.packages("pacman");library(pacman)}
p_load(tidyverse, haven, psych, conflicted, dplyr, lsr, ggplot2, ggpubr)
theme_set(theme_classic())
conflicts_prefer(dplyr::filter)
daten = haven::read_dta("Datensatz/Allbus_2021.dta")
daten <- daten %>%
rename(Konfession = rd01) %>%
filter(between(Konfession, 1, 6))%>%
filter(between(sex, 1, 3))
kreuztabelle <- table(daten$sex, daten$Konfession)
print(kreuztabelle)
daten <- daten %>%
mutate(Konfession = haven::as_factor(Konfession),
sex = haven::as_factor(sex))
ggplot(daten, aes(x = Konfession, fill = sex)) +
geom_bar(position = "fill") +
labs(title = "Verteilung der Konfessionszugehörigkeit nach Geschlecht",
x = "Einkommensgruppe", y = "Anteil") +
scale_fill_manual(values = c("darkseagreen","grey", "lightblue"))
ggplot(daten, aes(x = Konfession, fill = sex)) +
geom_bar(position = "fill") +
labs(title = "Verteilung der Konfessionszugehörigkeit nach Geschlecht",
x = "Einkommensgruppe", y = "Anteil") +
scale_fill_manual(values = c("darkseagreen","grey", "lightblue")) +
rotate_x_text(45)
ggplot(daten, aes(x = Konfession, fill = sex)) +
geom_bar(position = "fill") +
labs(title = "Verteilung der Konfessionszugehörigkeit nach Geschlecht",
x = "Konfession", y = "Anteil") +
scale_fill_manual(values = c("darkseagreen","grey", "lightblue")) +
rotate_x_text(45)
daten <- daten %>%
rename(Einkommensgruppe = di02a)%>%
rename(Bildung = educ)%>%
filter(between(Einkommensgruppe, 1, 25))%>%
filter(between(Bildung, 1, 5))
daten_neu <- daten_neu %>%
mutate(Einkommensgruppe = haven::as_factor(Einkommensgruppe),
sex = haven::as_factor(sex))
daten_neu <- daten %>%
filter(between(Einkommensgruppe, 1, 25))%>%
mutate(sex = as.numeric(sex)) %>%
filter(between(sex, 1, 3))
kreuztabelle_2 <- table(daten_neu$sex, daten_neu$Einkommensgruppe)
print(kreuztabelle_2)
daten_neu <- daten_neu %>%
mutate(Einkommensgruppe = haven::as_factor(Einkommensgruppe),
sex = haven::as_factor(sex))
ggplot(daten_neu, aes(x = Einkommensgruppe, fill = sex)) +
geom_bar(position = "fill") +
labs(title = "Verteilung der Einkommensgruppe nach Geschlecht",
x = "Einkommensgruppe", y = "Anteil") +
scale_fill_manual(values = c("darkseagreen","grey", "lightblue")) +
rotate_x_text(45)
daten_neu <- daten_neu %>%
mutate(Einkommensgruppe = haven::as_factor(Einkommensgruppe),
sex = haven::as_factor(sex))
ggplot(daten_neu, aes(x = Einkommensgruppe, fill = sex)) +
geom_bar(position = "fill") +
labs(title = "Verteilung der Einkommensgruppe nach Geschlecht",
x = "Einkommensgruppe", y = "Anteil") +
scale_fill_manual(values = c("darkseagreen","grey", "lightblue")) +
rotate_x_text(45)
daten_neu <- daten %>%
filter(between(Einkommensgruppe, 1, 25))%>%
filter(between(sex, 1, 3))
daten$sex
daten$sex
daten_neu <- daten %>%
filter(between(Einkommensgruppe, 1, 25)) %>%
filter(sex = "MANN" & sex = "FRAU"))
daten$sex
daten_neu <- daten %>%
filter(between(Einkommensgruppe, 1, 25)) %>%
filter(sex = "MANN" & sex = "FRAU")
daten$sex
daten_neu <- daten %>%
filter(between(Einkommensgruppe, 1, 25)) %>%
filter(sex == "MANN" & sex == "FRAU")
daten_neu <- daten %>%
filter(between(Einkommensgruppe, 1, 25)) %>%
filter(sex == "MANN" & sex == "FRAU")
kreuztabelle_2 <- table(daten_neu$sex, daten_neu$Einkommensgruppe)
print(kreuztabelle_2)
kreuztabelle_2 <- table(daten_neu$sex, daten_neu$Einkommensgruppe)
print(kreuztabelle_2)
daten_neu <- daten %>%
filter(between(Einkommensgruppe, 1, 25)) %>%
filter(sex == "MANN" | sex == "FRAU")
kreuztabelle_2 <- table(daten_neu$sex, daten_neu$Einkommensgruppe)
print(kreuztabelle_2)
daten_neu <- daten_neu %>%
mutate(Einkommensgruppe = haven::as_factor(Einkommensgruppe),
sex = haven::as_factor(sex))
ggplot(daten_neu, aes(x = Einkommensgruppe, fill = sex)) +
geom_bar(position = "fill") +
labs(title = "Verteilung der Einkommensgruppe nach Geschlecht",
x = "Einkommensgruppe", y = "Anteil") +
scale_fill_manual(values = c("darkseagreen","grey", "lightblue")) +
rotate_x_text(45)
chisq.test(kreuztabelle_2)
daten_neu <- daten_neu %>%
mutate(Einkommensgruppe = haven::as_factor(Einkommensgruppe),
sex = haven::as_factor(sex))
ggplot(daten_neu, aes(x = Einkommensgruppe, fill = sex)) +
geom_bar(position = "fill") +
labs(title = "Verteilung der Einkommensgruppe nach Geschlecht",
x = "Einkommensgruppe", y = "Anteil") +
scale_fill_manual(values = c("darkseagreen","grey", "lightblue")) +
rotate_x_text(45)
daten_neu <- daten %>%
filter(between(Einkommensgruppe, 1, 25))%>%
mutate(sex = as.numeric(sex)) %>%
filter(between(sex, 1, 3))
kreuztabelle_2 <- table(daten_neu$sex, daten_neu$Einkommensgruppe)
print(kreuztabelle_2)
daten_neu <- daten_neu %>%
mutate(Einkommensgruppe = haven::as_factor(Einkommensgruppe),
sex = haven::as_factor(sex))
ggplot(daten_neu, aes(x = Einkommensgruppe, fill = sex)) +
geom_bar(position = "fill") +
labs(title = "Verteilung der Einkommensgruppe nach Geschlecht",
x = "Einkommensgruppe", y = "Anteil") +
scale_fill_manual(values = c("darkseagreen","grey", "lightblue")) +
rotate_x_text(45)
chisq.test(kreuztabelle_2)
cramers_v <- cramersV(kreuztabelle_2)
paste0("Cramér's V: ", cramers_v)
