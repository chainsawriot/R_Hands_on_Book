edg <- get.edgelist(g, names=F)
edge_share <- table(bib[edg])
esp_values <- c(0:20)
fre <- as.vector(edge_share)
alpha <- c(0.01, 0.1, 0.25,0.5, 0.7, 1)
for(i in 1:length(alpha)){
print(alpha[i])
print( (  1-( 1-exp(-alpha[i]) )^esp_values  )*fre )
cat('empirical comparison')
print(edge_share)
cat('\n')
}
# alpha = 0.01 seems best choice
### MODELL 1: network endegenous effects + plus homophily
model.1 <- ergm( net ~ edges  + gwesp(0.01, fixed = T)  +
nodematch('Gender') + nodematch('Mourning') + nodematch('Noble'),
control.ergm=c(seed=1234,MCMCsamplesize=1000)) ## if you have time to kill: try to do it WITHOUT gwesp
summary(model.1)
model.1.gof <- gof(model.1 ~ degree + distance)
plot(model.1.gof)
## "Okish" fit, but seems uninteresting
library(intergraph)
library(igraph)
bib <- bibcoupling(g)
edg <- get.edgelist(g, names=F)
edge_share <- table(bib[edg])
esp_values <- c(0:20)
fre <- as.vector(edge_share)
alpha <- c(0.01, 0.1, 0.25,0.5, 0.7, 1)
for(i in 1:length(alpha)){
print(alpha[i])
print( (  1-( 1-exp(-alpha[i]) )^esp_values  )*fre )
cat('empirical comparison')
print(edge_share)
cat('\n')
}
# alpha = 0.01 seems best choice
### MODELL 1: network endegenous effects + plus homophily
model.1 <- ergm( net ~ edges  + gwesp(0.01, fixed = T)  +
nodematch('Gender') + nodematch('Mourning') + nodematch('Noble'),
control.ergm=c(seed=1234,MCMCsamplesize=1000)) ## if you have time to kill: try to do it WITHOUT gwesp
summary(model.1)
model.1.gof <- gof(model.1 ~ degree + distance)
plot(model.1.gof)
## "Okish" fit, but seems uninteresting
### MODELL 2: network endegenous effects + plus homophily plus popularity
model.2 <- ergm( net ~ edges  + gwesp(0.01, fixed = T) +
nodematch('Gender')  + nodematch('Mourning')+ nodematch('Noble') +
nodecov('Popularity') + nodecov('NumDeath'),
control.ergm=c(seed=1234,MCMCsamplesize=1000))
summary(model.2)
model.2.gof <- gof(model.2 ~ degree + distance)
plot(model.2.gof)
v <- cov[cov$house == '',]
# DELETE those vertices [ATTENTION: vertice index is not dynamic, thus you have to adapt your count value]
for(i in 1:length(rownames(v))){
network::delete.vertices(net, as.numeric(rownames(v)[i]) - (i-1))
}
# check out if it worked
c('Shae') %in% network.vertex.names(net)
c('Robb') %in% network.vertex.names(net)
model.2.select <- ergm( net ~ edges  + gwesp(0.01, fixed = T) +
nodematch('Gender')  + nodematch('Mourning')+ nodematch('Noble') + nodematch('House') +
nodecov('Popularity') + nodecov('NumDeath'),
control.ergm=c(seed=1234,MCMCsamplesize=1000))
summary(model.2.select)
model.2.select.gof <- gof(model.2.select ~ degree + distance)
plot(model.2.select.gof)
library(statnet)
library(foreign)
library(car)
ESS <- read.dta("ESS8.dta")
# Setze einen Paketmirror (CRAN)
# chooseCRANmirror(39)
install.packages("haven", repos = "https://cloud.r-project.org/")
#install.packages("haven")
install.packages("tidyverse")
install.packages("vcd")
library(tidyverse)
library(haven)
library(vcd)
daten = haven::read_dta("Datensatz/Allbus_2021.dta")
daten <- daten %>%
rename(Konfession = rd01)%>%
filter(between(Konfession, 1, 6))%>%
filter(between(sex, 1, 3))
kreuztabelle <- table(daten$sex, daten$Konfession)
print(kreuztabelle)
library(ggplot2)
daten$Konfession <- as.factor(daten$Konfession)
daten$sex <- as.factor(daten$sex)
ggplot(daten, aes(x = Konfession, fill = sex)) +
geom_bar(position = "fill") +
labs(title = "Verteilung der Konfessionszugehörigkeit nach Geschlecht",
x = "Einkommensgruppe", y = "Anteil") +
scale_fill_manual(values = c("blue", "red", "green")) # Farben anpassen
chisq.test(kreuztabelle)
library(vcd)
cramers_v <- CramerV(kreuztabelle)
# Setze einen Paketmirror (CRAN)
# chooseCRANmirror(39)
install.packages("haven", repos = "https://cloud.r-project.org/")
#install.packages("haven")
install.packages("tidyverse")
install.packages("vcd")
library(tidyverse)
library(haven)
library(vcd)
daten = haven::read_dta("Datensatz/Allbus_2021.dta")
daten <- daten %>%
rename(Konfession = rd01)%>%
filter(between(Konfession, 1, 6))%>%
filter(between(sex, 1, 3))
kreuztabelle <- table(daten$sex, daten$Konfession)
print(kreuztabelle)
library(ggplot2)
daten$Konfession <- as.factor(daten$Konfession)
daten$sex <- as.factor(daten$sex)
ggplot(daten, aes(x = Konfession, fill = sex)) +
geom_bar(position = "fill") +
labs(title = "Verteilung der Konfessionszugehörigkeit nach Geschlecht",
x = "Einkommensgruppe", y = "Anteil") +
scale_fill_manual(values = c("blue", "red", "green")) # Farben anpassen
chisq.test(kreuztabelle)
#library(vcd)
#cramers_v <- CramerV(kreuztabelle)
#print(cramers_v)
# Schritt 1: Extrahieren des beobachteten Chi-Quadrat-Werts
chi_square <- chisq.test(kreuztabelle)$statistic
# Schritt 2: Berechnen der Effektstärke (Cramér's V)
n <- sum(kreuztabelle)  # Gesamtanzahl der Beobachtungen
k <- nrow(kreuztabelle)  # Anzahl der Kategorien in 'sex'
r <- ncol(kreuztabelle)  # Anzahl der Kategorien in 'Konfession'
V <- sqrt(chi_square / (n * min(k-1, r-1)))
# Schritt 3: Ausgabe der beobachteten Chi-Quadrat-Wert und Cramér's V
cat("Beobachteter Chi-Quadrat-Wert:", chi_square, "\n")
cat("Cramér's V:", V, "\n")
daten <- daten %>%
rename(Einkommensgruppe = di02a)%>%
rename(Bildung = educ)%>%
filter(between(Einkommensgruppe, 1, 25))%>%
filter(between(Bildung, 1, 5))
result_spearman <- cor.test(daten$Einkommensgruppe, daten$Bildung, method = "spearman")
print(result_spearman)
result_kendall <- cor.test(daten$Einkommensgruppe, daten$Bildung, method = "kendall")
print(result_kendall)
daten_neu <- daten %>%
filter(between(Einkommensgruppe, 1, 25))%>%
mutate(sex = as.numeric(sex)) %>%
filter(between(sex, 1, 3))
result_spearman <- cor.test(daten_neu$sex, daten_neu$Einkommensgruppe, method = "spearman")
print(result_spearman)
library(ggplot2)
daten_neu$Einkommensgruppe <- as.factor(daten_neu$Einkommensgruppe)
daten_neu$sex <- as.factor(daten$sex)
ggplot(daten_neu, aes(x = Einkommensgruppe, fill = sex)) +
geom_bar(position = "fill") +
labs(title = "Verteilung der Einkommensgruppe nach Geschlecht",
x = "Einkommensgruppe", y = "Anteil") +
scale_fill_manual(values = c("blue", "red", "green")) # Farben anpassen
# Setze einen Paketmirror (CRAN)
# chooseCRANmirror(39)
# install.packages("haven", repos = "https://cloud.r-project.org/")
install.packages("haven")
install.packages("tidyverse")
install.packages("vcd")
library(tidyverse)
library(haven)
library(vcd)
daten = haven::read_dta("Datensatz/Allbus_2021.dta")
# Setze einen Paketmirror (CRAN)
# chooseCRANmirror(39)
# install.packages("haven", repos = "https://cloud.r-project.org/")
install.packages("haven")
install.packages("tidyverse")
install.packages("vcd")
install.packages("devtools")
install.packages("tidyverse")
# Setze einen Paketmirror (CRAN)
# chooseCRANmirror(39)
# install.packages("haven", repos = "https://cloud.r-project.org/")
install.packages("haven")
install.packages("tidyverse")
install.packages("vcd")
install.packages("devtools")
library(tidyverse)
library(haven)
library(vcd)
library(conflicted)
library(dplyr)
conflicts_prefer(dplyr::filter)
daten = haven::read_dta("Datensatz/Allbus_2021.dta")
daten <- daten %>%
rename(Konfession = rd01)%>%
filter(between(Konfession, 1, 6))%>%
filter(between(sex, 1, 3))
kreuztabelle <- table(daten$sex, daten$Konfession)
print(kreuztabelle)
library(ggplot2)
daten$Konfession <- as.factor(daten$Konfession)
daten$sex <- as.factor(daten$sex)
ggplot(daten, aes(x = Konfession, fill = sex)) +
geom_bar(position = "fill") +
labs(title = "Verteilung der Konfessionszugehörigkeit nach Geschlecht",
x = "Einkommensgruppe", y = "Anteil") +
scale_fill_manual(values = c("blue", "red", "green")) # Farben anpassen
# Schritt 1: Extrahieren des beobachteten Chi-Quadrat-Werts
chi_square <- chisq.test(kreuztabelle)$statistic
# Schritt 2: Berechnen der Effektstärke (Cramér's V)
n <- sum(kreuztabelle)  # Gesamtanzahl der Beobachtungen
k <- nrow(kreuztabelle)  # Anzahl der Kategorien in 'sex'
r <- ncol(kreuztabelle)  # Anzahl der Kategorien in 'Konfession'
V <- sqrt(chi_square / (n * min(k-1, r-1)))
# Schritt 3: Ausgabe der beobachteten Chi-Quadrat-Wert und Cramér's V
cat("Beobachteter Chi-Quadrat-Wert:", chi_square, "\n")
cat("Cramér's V:", V, "\n")
daten <- daten %>%
rename(Einkommensgruppe = di02a)%>%
rename(Bildung = educ)%>%
filter(between(Einkommensgruppe, 1, 25))%>%
filter(between(Bildung, 1, 5))
result_spearman <- cor.test(daten$Einkommensgruppe, daten$Bildung, method = "spearman")
print(result_spearman)
result_kendall <- cor.test(daten$Einkommensgruppe, daten$Bildung, method = "kendall")
print(result_kendall)
daten_neu <- daten %>%
filter(between(Einkommensgruppe, 1, 25))%>%
mutate(sex = as.numeric(sex)) %>%
filter(between(sex, 1, 3))
daten_neu <- daten %>%
filter(between(Einkommensgruppe, 1, 25))%>%
mutate(sex = as.numeric(sex)) %>%
filter(between(sex, 1, 3))
kreuztabelle <- table(daten_neu$sex, daten_neu$Einkommensgruppe)
print(kreuztabelle)
kreuztabelle_2 <- table(daten_neu$sex, daten_neu$Einkommensgruppe)
print(kreuztabelle_2)
chisq.test(kreuztabelle_2)
# Schritt 1: Extrahieren des beobachteten Chi-Quadrat-Werts
chi_square <- chisq.test(kreuztabelle_2)$statistic
# Schritt 2: Berechnen der Effektstärke (Cramér's V)
n <- sum(kreuztabelle_2)  # Gesamtanzahl der Beobachtungen
k <- nrow(kreuztabelle_2)  # Anzahl der Kategorien in 'sex'
r <- ncol(kreuztabelle_2)  # Anzahl der Kategorien in 'Konfession'
V <- sqrt(chi_square / (n * min(k-1, r-1)))
# Schritt 3: Ausgabe der beobachteten Chi-Quadrat-Wert und Cramér's V
cat("Beobachteter Chi-Quadrat-Wert:", chi_square, "\n")
cat("Cramér's V:", V, "\n")
library(ggplot2)
daten_neu$Einkommensgruppe <- as.factor(daten_neu$Einkommensgruppe)
daten_neu$sex <- as.factor(daten$sex)
ggplot(daten_neu, aes(x = Einkommensgruppe, fill = sex)) +
geom_bar(position = "fill") +
labs(title = "Verteilung der Einkommensgruppe nach Geschlecht",
x = "Einkommensgruppe", y = "Anteil") +
scale_fill_manual(values = c("blue", "red", "green")) # Farben anpassen
library(ggplot2)
library(ggdist)
library(ggplot2)
install("ggdist")
library(ggplot2)
install.packages("ggdist")
library(ggdist)
# Erzeugen eines Beispiel-Datensatzes
data <- data.frame(Fernsehnutzung = c(2, 3, 4, 5, 6, 7, 8),
Werbespots = c(10, 12, 14, 16, 18, 20, 22))
# Erstellen einer Grafik im Graphic Novel Style
ggplot(data, aes(x = Fernsehnutzung, y = Werbespots)) +
geom_point(aes(color = "Punkte"), size = 3) +
stat_smooth(method = "lm", se = FALSE, color = "black", linetype = "dashed", aes(color = "Regressionsgerade")) +
theme_minimal() +
labs(title = "Fernsehnutzung vs. Anzahl der Werbespots",
x = "Fernsehnutzung (Stunden)",
y = "Anzahl der Werbespots") +
scale_color_manual(values = c("Punkte" = "#0072B2", "Regressionsgerade" = "#D55E00")) +
theme(plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
axis.title = element_text(size = 14),
legend.position = "bottom") +
guides(color = guide_legend(override.aes = list(size = 4)))
# Speichern der Grafik als Datei (optional)
ggsave("graphic_novel_plot.png", width = 8, height = 6, dpi = 300)
install.packages("haven")
install.packages("tidyverse")
install.packages("vcd")
install.packages("devtools")
library(tidyverse)
library(haven)
library(vcd)
library(conflicted)
library(dplyr)
conflicts_prefer(dplyr::filter)
install.packages("haven")
install.packages("haven")
install.packages("tidyverse")
install.packages("vcd")
install.packages("devtools")
library(tidyverse)
library(haven)
library(vcd)
library(conflicted)
library(dplyr)
conflicts_prefer(dplyr::filter)
install.packages("haven")
install.packages("tidyverse")
install.packages("vcd")
install.packages("devtools")
library(tidyverse)
library(haven)
library(vcd)
library(conflicted)
library(dplyr)
conflicts_prefer(dplyr::filter)
daten = haven::read_dta("Datensatz/Allbus_2021.dta")
install.packages("tidyverse")
daten_neu <- daten %>%
rename(TV_Konsum = lm02)%>%
rename(TV_Vertrauen= pt09)%>%
filter(between(Konfession, 0, 1500))%>%
filter(between(TV_Vertrauen, 1, 7))
install.packages("haven")
install.packages("tidyverse")
install.packages("vcd")
install.packages("devtools")
library(tidyverse)
library(haven)
library(vcd)
library(conflicted)
library(dplyr)
conflicts_prefer(dplyr::filter)
daten = haven::read_dta("Datensatz/Allbus_2021.dta")
daten_neu <- daten %>%
rename(TV_Konsum = lm02)%>%
rename(TV_Vertrauen= pt09)%>%
filter(between(Konfession, 0, 1500))%>%
filter(between(TV_Vertrauen, 1, 7))
daten_neu <- daten %>%
rename(TV_Konsum = lm02)%>%
rename(TV_Vertrauen= pt09)%>%
filter(between(TV_Konsum, 0, 1500))%>%
filter(between(TV_Vertrauen, 1, 7))
korrelation <- daten %>%
summarize(correlation = cor(TV_Konsum, TV_Vertrauen, use = "daten_neu"))
korrelation <- daten %>%
summarize(correlation = cor(TV_Konsum, TV_Vertrauen, use = "complete.obs"))
korrelation <- daten_neu %>%
summarize(correlation = cor(TV_Konsum, TV_Vertrauen, use = "complete.obs"))
# Zeige die Korrelation an
print(korrelation)
korrelation <- daten_neu %>%
summarize(correlation = cor(TV_Konsum, TV_Vertrauen, use = "complete.obs"))
print(korrelation)
scatterplot <- ggplot(daten_neu, aes(x = TV_Konsum, y = TV_Vertrauen)) +
geom_point() +
labs(x = "TV Konsum", y = "TV Vertrauen", title = "Korrelation zwischen TV Konsum und Vertrauen")
print(scatterplot)
scatterplot <- ggplot(daten_neu, aes(x = TV_Konsum, y = TV_Vertrauen)) +
geom_point(color = "blue") +
labs(x = "TV Konsum", y = "TV Vertrauen", title = "Korrelation zwischen TV Konsum und Vertrauen")
print(scatterplot)
install.packages("haven")
install.packages("tidyverse")
install.packages("devtools")
library(tidyverse)
library(haven)
library(conflicted)
library(dplyr)
conflicts_prefer(dplyr::filter)
daten = haven::read_dta("Datensatz/Allbus_2021.dta")
install.packages("tidyverse")
install.packages("haven")
install.packages("tidyverse")
install.packages("devtools")
library(tidyverse)
library(haven)
library(conflicted)
library(dplyr)
conflicts_prefer(dplyr::filter)
daten = haven::read_dta("Datensatz/Allbus_2021.dta")
daten_neu <- daten %>%
rename(TV_Konsum = lm02)%>%
rename(TV_Vertrauen= pt09)%>%
filter(between(TV_Konsum, 0, 1500))%>%
filter(between(TV_Vertrauen, 1, 7))
korrelation <- daten_neu %>%
summarize(correlation = cor(TV_Konsum, TV_Vertrauen, use = "complete.obs"))
print(korrelation)
scatterplot <- ggplot(daten_neu, aes(x = TV_Konsum, y = TV_Vertrauen)) +
geom_point(color = "blue") +
labs(x = "TV Konsum", y = "TV Vertrauen", title = "Korrelation zwischen TV Konsum und Vertrauen")
print(scatterplot)
daten_neu2 <- daten %>%
rename(TV_Konsum = lm02)%>%
rename(Kriminalitätsprognose= cf03)%>%
filter(between(TV_Konsum, 0, 1500))%>%
filter(between(Kriminalitätsprognose, 1, 5))
korrelation <- daten_neu2 %>%
summarize(correlation = cor(TV_Konsum, Kriminalitätsprognose, use = "complete.obs"))
print(korrelation)
scatterplot <- ggplot(daten_neu2, aes(x = TV_Konsum, y = Kriminalitätsprognose)) +
geom_point(color = "red") +
labs(x = "TV Konsum", y = "Kriminalitätsprognose", title = "Korrelation zwischen TV Konsum und Kriminalitätsprognose")
print(scatterplot)
install.packages("tidyverse")
install.packages("broom")
install.packages("lm.beta")
install.packages("performance")
install.packages("tidyverse")
install.packages("broom")
install.packages("lm.beta")
install.packages("performance")
install.packages("see")
install.packages("haven")
library(tidyverse)
library(broom)
library(lm.beta)
library(performance)
library(see)
library(haven)
install.packages("haven")
daten2 <- daten %>%
rename(Nachrichtenrezeption = lm20)%>%
rename(Vertrauen_Bundestag = pt12)%>%
filter(between(Nachrichtenrezeption, 0, 7))%>%
filter(between(Vertrauen_Bundestag, 1, 7))
daten = haven::read_dta("Datensatz/Allbus_2021.dta")
daten2 <- daten %>%
rename(Nachrichtenrezeption = lm20)%>%
rename(Vertrauen_Bundestag = pt12)%>%
filter(between(Nachrichtenrezeption, 0, 7))%>%
filter(between(Vertrauen_Bundestag, 1, 7))
daten = haven::read_dta("Datensatz/Allbus_2021.dta")
daten <- daten %>%
rename(Nachrichtenrezeption = lm20)%>%
rename(Vertrauen_Bundestag = pt12)%>%
filter(between(Nachrichtenrezeption, 0, 7))%>%
filter(between(Vertrauen_Bundestag, 1, 7))
install.packages("tidyverse")
install.packages("broom")
install.packages("lm.beta")
install.packages("performance")
install.packages("see")
install.packages("haven")
intsall.packages("dplyr")
install.packages("haven")
install.packages("tidyverse")
install.packages("broom")
install.packages("lm.beta")
install.packages("performance")
install.packages("see")
install.packages("haven")
install.packages("dplyr")
library(tidyverse)
library(broom)
library(lm.beta)
library(performance)
library(see)
library(haven)
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
daten = haven::read_dta("Datensatz/Allbus_2021.dta")
daten <- daten %>%
rename(Nachrichtenrezeption = lm20)%>%
rename(Vertrauen_Bundestag = pt12)%>%
filter(between(Nachrichtenrezeption, 0, 7))%>%
filter(between(Vertrauen_Bundestag, 1, 7))
install.packages("tidyverse")
install.packages("broom")
install.packages("lm.beta")
install.packages("performance")
install.packages("see")
install.packages("haven")
install.packages("dplyr")
library(tidyverse)
library(broom)
library(lm.beta)
library(performance)
library(see)
library(haven)
library(dplyr)
install.packages("haven")
daten = haven::read_dta("Datensatz/Allbus_2021.dta")
daten <- daten %>%
rename(Nachrichtenrezeption = lm20)%>%
rename(Vertrauen_Bundestag = pt12)%>%
filter(between(Nachrichtenrezeption, 0, 7))%>%
filter(between(Vertrauen_Bundestag, 1, 7))
install.packages("tidyverse")
install.packages("broom")
install.packages("lm.beta")
install.packages("performance")
install.packages("see")
install.packages("haven")
install.packages("dplyr")
library(tidyverse)
library(broom)
library(lm.beta)
library(performance)
library(see)
library(haven)
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
