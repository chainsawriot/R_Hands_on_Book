---
title: "Tabellen und Grafiken in R"
author: "Cornelius Puschmann"
toc: true
number-sections: true
highlight-style: pygments
format:
  html:
    code-fold: false
    code-line-numbers: true
---

# Eine Einführung in ggplot2

Dieses Notebook illustriert verschiedene Möglichkeiten dafür, wie auf Grundlage der ALLBUS-Daten informative Tabellen und Plots erstellt werden können. Tabellen und Datenvisualisierungen ("Plots") stellen zwei sehr effektive Möglichkeiten dar, sich schnell einen Überblick über komplexe Daten zu verschaffen. Dabei lassen sich oftmals Zusammenhänge zwischen zwei oder mehr Variablen erahnen, die dann später inferenzstatistisch auf die Solidität ihres Zusammenhangs hin überprpüft werden können.

Zunächst laden wir die die Pakete des tidyverse. Die Einstellung theme_set hat einen Einfluss auf die Grafiken, die wir später erstellen werden.

```{r Laden der notwendigen Pakete}
library(tidyverse)
library(naniar)
library(haven)
theme_set(theme_minimal())
```

Jetzt laden wir den ALLBUS-Datensatz mittels der Stata-Importfunktion read_dta.

```{r Laden der ALLBUS-Daten}
daten <- read_dta("Datensatz/Allbus_2021.dta")
```

Nun laden wir zudem noch drei kleinere Zufallssamples aus dem Gesamtdatensatz. Diese bestehen aus einer kleineren Anzahl relevanter Variablen und sind daher etwas übersichtlicher als der Hauptdatensatz.

```{r Laden von drei kleineren Teilsamples}
sample_klein <- read_rds("Datensatz/ALLBUS_sample_klein.rds")
sample_mittel <- read_rds("Datensatz/ALLBUS_sample_mittel.rds")
sample_gross <- read_rds("Datensatz/ALLBUS_sample_gross.rds")
```

Wie sehen die Daten aus?

```{r Datensatz anzeigen lassen}
sample_klein
```

# Tabellen

Tabellen (und besonder sog. Kontingenz- oder Häufigkeitstabellen) sind ein einfaches und praktisches Mittel, um sich einen Überblick über Daten zu verschaffen.

## Einfache Häufigkeitstabelle

Wir berechnen eine einfache Häufigkeitstabelle für die Variable 'edubde1' (höchster Bildungsabschluss).

```{r Einfache Häufigkeitstabelle}
geschlechterverteilung <- sample_klein %>% 
  group_by(geschlecht) %>% 
  summarise(anzahl = n())
geschlechterverteilung
```

Im nächsten Schritt fügen wir relative Anteile hinzu, um Verhältnisse besser zu verstehen.

```{r Häufigkeitstabelle mit Anteilen}
geschlechterverteilung <- sample_klein %>% 
  group_by(geschlecht) %>% 
  summarise(anzahl = n()) %>% 
  mutate(anteil = anzahl/sum(anzahl))
geschlechterverteilung
```

Nun fügen wir noch Prozentanteile ein, indem with mit 100 multiplizieren und runden (was in erster Linie kosmetischer Natur ist).

```{r Häufigkeitstabelle mit gerundeten Prozentwerten}
geschlechterverteilung <- sample_klein %>% 
  group_by(geschlecht) %>% 
  summarise(anzahl = n()) %>% 
  mutate(anteil = anzahl/sum(anzahl),
         prozent = round(anteil * 100))
geschlechterverteilung
```

## Tabellen speichern

Jetzt schreiben wir die Daten in eine CSV-Datei, die wir bspw. später mit Excel oder einer anderen Tabellenkalkulation öffnen können.

```{r Daten als CSV schreiben}
write_excel_csv2(geschlechterverteilung, file = "geschlechterverteilung.csv")
```

## Kreuztabellen

Was, wenn wir zwei Variablen mit Blick auf ihre Werte in Beziehung setzen wollen? Das bezeichnet man als Kreuz- oder Kontigenztabelle.

```{r Kreuztabelle berechnen}
bildung_und_geschlecht <- sample_klein %>% 
  group_by(bildung, geschlecht) %>% 
  summarise(anzahl = n()) %>% 
  mutate(anteil = anzahl/sum(anzahl),
         prozent = round(anteil * 100))
bildung_und_geschlecht
```

Möglicherweise möchte ich den Anteil anders berechnen und nicht die relative Geschlechterverteilung *innerhalb* eines Bildungsabschlusses in den Blick nehmen, sondern etwa die Verteilung der Bildungsabschlüsse jeweils für männliche und weibliche Studienteilnehmer anschauen. Dies lässt sich mit einer Neugruppierung der Daten durch group_by() erreichen.

```{r Kreuztabelle umgruppieren}
geschlecht_und_bildung <- sample_klein %>% 
  group_by(geschlecht, bildung) %>% 
  summarise(anzahl = n()) %>% 
  mutate(anteil = anzahl/sum(anzahl),
         prozent = round(anteil * 100))
geschlecht_und_bildung
```

# Visualisierung

Beim Erstellen von Grafiken (Plots) mit R kommt eines der populärsten tidyverse-Pakete zum Einsatz: [ggplot2](https://ggplot2.tidyverse.org/). Damit lassen sich sehr vielfältige Grafiken erstellen.

## Balkendiagramme

Das einfachste Diagramm, das man mit dem ggplot2-Paket erstellen kann, ist ein Balkendiagramm (barplot). Das nachstehende Beispiel zeigt die Häufigkeitsverteilung der Variable gndr (gender = Geschlecht) im Datensatz.

```{r Ein erstes Plot}
ggplot(sample_klein, aes(geschlecht)) + 
  geom_bar()
```

In einem nächsten Schritt fügen wir eine Überschrift hinzu und formatieren die Balken und Achsen so, dass das Plot lesbarer ist.

```{r Beschriftungen hinzufügen}
ggplot(sample_klein, aes(bildung)) + 
  geom_bar() + 
  ggtitle("Verteilung der Bildungsabschlüsse der Befragten") + 
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) + 
  xlab("") + ylab("")
```

Farben lassen sich in ggplot vielseitig einsetzen, um Kategorienunterschiede anzuzeigen. Dies geschieht mit den Argumenten 'fill' bzw. 'color'.

```{r Barplot mit Farbpalette}
ggplot(sample_klein, aes(bildung, fill = bildung)) + 
  geom_bar() +
  ggtitle("Verteilung der Bildungsabschlüsse der Befragten") + 
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) + 
  xlab("") + ylab("")
```

Es existieren zahlreiche Farbpaletten für ggplot, um unterschiedliche Arten von Beziehungen darzustellen. Das nachstehende Palette unterscheidet verschiedenen Kategorien. Für gradierte Variablen ('viel' - 'wenig') sind andere Paletten z.T. besser geeignet. Eine gute Auswahl an Palette enthält u.a. das Paket [RColorBrewer](https://r-graph-gallery.com/38-rcolorbrewers-palettes.html).

```{r Barplot mit gradierter Farbpalette}
ggplot(sample_klein, aes(bildung, fill = bildung)) + 
  geom_bar() + coord_flip() + 
  scale_fill_brewer(palette = "Set1") +  
  ggtitle("Verteilung der Bildungsabschlüsse der Befragten") + 
  xlab("") + ylab("")
```

Schließlich lassen sich auch die Beschriftung und weitere Aspekte eines Plots anpassen (Achsenorientierung, Legende etc).

```{r Barplot mit weiteren Anpassungen und Beschriftung}
ggplot(sample_klein, aes(as_factor(fernsehkonsum))) + 
  geom_bar() +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) + 
  ggtitle("Fernsehkonsum pro Woche in Tagen") + 
  xlab("Fernsehkonsum pro Woche in Tagen") + ylab("Anzahl der Respondenten")
```

## Histogramme

Für ein besseres Verständnis einer Verteilung sind oftmals die Häufigkeitsausprägungen einer kontinuierlichen Variable in gleich großen Gruppen interessant (sog. "bins"). Dabei hilft der Visualisierungstyp Histogramm.

```{r Ein einfaches Histogramm}
ggplot(sample_mittel, aes(alter)) + 
  geom_histogram()
```

Auch hier lassen sich relevante Aspekte anpassen, etwa die Anzahl und Breite der Balken.

```{r Histogramm mit angepassten Bins}
ggplot(sample_mittel, aes(alter)) + 
  geom_histogram(bins = 40) + 
  ggtitle("Altersverteilung der Respondenten") + 
  xlab("Alter") + ylab("Anzahl der Respondenten")
```

Hier können wir erstmalig die Farbe eines Elements gezielt einsetzen, um eine zusätzliche (also nach Vetrauen auf der x-Achse und der Anzahl der Respondenten auf der y-Achse eine dritte Variable) darzustellen, nämlich das Geschlecht der Respondenten.

```{r Histogramm mit Gruppierung und Farbe nach Geschlecht}
ggplot(sample_gross, aes(vertrauen_polizei, fill = geschlecht)) + 
  geom_histogram(binwidth = 1, position = "dodge") + 
  ggtitle("Vertrauen in die Polizei nach Geschlecht") + 
  xlab("Vetrauen (1-7)") + ylab("Anzahl der Respondenten") + labs(fill = "Geschlecht") 
```

Neben Balken beherrscht ggplot auch zahlreiche weitere Darstellungsformen (sog. geoms). Eine interessante Alternative zum klassischen Histogramm ist etwa das Dichte-Plot (density plot). Nachstehend verwenden wir zwei Flächen und einen Trasparenz-Effekt für die Darstellung.

## Dichte-Plots

```{r Dichte-Diagramm}
polizei <- sample_gross %>% select(vertrauen_polizei, geschlecht) %>% filter(!is.na(geschlecht))
ggplot(polizei, aes(vertrauen_polizei, fill = geschlecht)) + 
  geom_density(alpha = 0.5) + 
  ggtitle("Vertrauen in die Polizei nach Geschlecht") + 
  xlab("Vetrauen (1-7)") + ylab("Anteil der Respondenten") + labs(fill = "Geschlecht") 
```

## Liniendiagramme

Zu den klassischen Plot-Typen gehören neben Barplots und Histogrammen auch Linien-, Punkt- und Streudiagramme, sowie Boxplots.

```{r Ein Liniendiagramm}
vertrauen_nach_partei <- sample_gross %>% 
  rename(Partei = wahlabsicht_partei) %>% 
  group_by(Partei) %>% 
  summarise(Vertrauenswürdigkeit = mean(vertrauen_zeitungswesen, na.rm = T))

ggplot(vertrauen_nach_partei, aes(Partei, Vertrauenswürdigkeit, group = 1)) + 
  geom_line() + geom_point(size = 3) + 
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
  ggtitle("Vertrauen in die Presse nach Partei")
```

Es lassen sich auch problemlos mehrere Geoms kominieren (hier: Linie und Punkte). Im folgenden Beispiel lässt sich durch eine absteigende Sortierung der Ergebnisse ein klareres Resultat erzielen.

```{r Linien- und Punktediagramm sortiert}
vertrauen_nach_partei_sortiert <- vertrauen_nach_partei %>% 
  arrange(desc(Vertrauenswürdigkeit)) %>% 
  mutate(Rang = row_number())

ggplot(vertrauen_nach_partei_sortiert, aes(reorder(Partei, Rang), Vertrauenswürdigkeit, group = 1)) + 
  geom_line() + geom_point(size = 3) + 
  theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1)) +
  ggtitle("Verrauen in die Presse nach Partei") + xlab("")
```

## Streudiagramme

Eine weiterer Diagrammtyp, der häufig zum Einsatz kommt, ist das Streudiagramm (scatter plot). Mit diesem Plottypen lassen sich die Beziehung mehrerer Variablen (i.d.R. zwei, jeweils auf der x/y-Achse) darstellen.

```{r Datenauswahl zum Einkommen treffen}
einkommen <- daten %>% 
  select(age, sex, educ, di01a) %>% 
  rename(alter = age,
         geschlecht = sex,
         bildung = educ,
         einkommen = di01a) %>% 
  replace_with_na_all(condition = ~.x < 0) %>% 
  mutate(geschlecht = as_factor(geschlecht),
         bildung = as_factor(bildung)) %>% 
  drop_na() %>% 
  slice_sample(n = 80)
einkommen
```

Welche Beziehung lässt sich zwischen Alter (x-Achse) und täglicher Internetnutzung in Minuten (y-Achse) feststellen?

```{r Ein einfaches Streudiagramm}
ggplot(einkommen, aes(alter, einkommen)) +
  geom_point()
```

Wir wenden uns jetzt einem etwas ausgefeilteren Beispiel zu, nämlich der Beziehung von politischen Interesse und Nachrichtennutzung.

```{r Ein weiteres Beispiel für ein Streudiagramm}
ggplot(einkommen, aes(alter, einkommen)) +
  geom_jitter(width = .5, size = 2) +
  geom_smooth(method = 'lm', formula = 'y ~ x') + 
  ggtitle("Zusammenhang zwischen Alter und Nettoeinkommen") + 
  xlab("Alter") + ylab("Nettoeinkommen in Euro")
```

Bei der Linie, die wir mit geom_smooth gezeichnet haben, handelt es sich um eine [Regressionsgerade](https://de.wikipedia.org/wiki/Lineare_Einfachregression). Der graue Bereich um die Gerade zeigt den lokalen Standardfehler an. Auf Regressionmodelle gehen wir zum Abschluss des Moduls noch intensiv ein.

Was, wenn wir mehr als drei Variablen (bzw. unterschiedliche Ausprägungen einer kategorialen Variable) darstellen wollen? Neben der Positionierung auf der x- und y-Achse und der Farbe können wir hier zusätzlich auch noch mit unterschiedlichen Formen arbeiten.

Das nachstehende Beispiel ist nicht unbedingt besonders informativ, zeigt aber das Prinzip nachvollziehbar auf.

```{r Streudiagramm mit vier Farben und zwei Formen}
ggplot(einkommen, aes(alter, einkommen, color = bildung, shape = geschlecht)) +
  geom_jitter(width = .5, height = .5, size = 2) +
  #geom_smooth(method = 'lm', formula = 'y ~ x', se = FALSE) + 
  ggtitle("Zusammenhang zwischen Alter und Nettoeinkommen ") + 
  xlab("Alter") + ylab("Nettoeinkommen") + 
  labs(color = "Bildungsabschluss") + labs(shape = "Geschlecht")
```

## Facettierte Plots

Neben dem Einsatz unterschiedlicher Farben und Formen kann auch sog. Facettierung zum Einsatz kommen um zusätzliche Informationen darzustellen. In einem weiteren Beispiel nehmen wir den Zusammenhang zwischen soziodemographischen Variablen und der Internetnutzung in den Blick. Dazu fügen wir zunächst eine Variable Altersgruppe ein, welche die einzelnen Altersangaben in Kohorten zusammenfasst.

```{r}
social_media <- sample_gross %>% 
  mutate(altersgruppe = cut(alter, 
                           breaks = c(0, 24, 34, 44, 54, 64, Inf),
                           labels = c("18-24", "25-34", "35-44", "45-54", "55-64", "65+")),
         zufriedenheit_demokratie_zusammengefasst = as_factor(case_when(
           zufriedenheit_demokratie %in% c("SEHR ZUFRIEDEN", 
                                           "ZIEMLICH ZUFRIEDEN", 
                                           "ETWAS ZUFRIEDEN") ~ "eher zufrieden",
           zufriedenheit_demokratie %in% c("ETWAS UNZUFRIEDEN",
                                           "ZIEML. UNZUFRIEDEN",
                                           "SEHR UNZUFRIEDEN") ~ "eher unzufrieden"))) %>% 
  select(altersgruppe, geschlecht, zufriedenheit_demokratie_zusammengefasst, social_media_nachrichtenquelle)
```

Dann aggregieren wir nach Altersgruppe, Geschlecht und Land und plotten anschließend die Ergebnisse.

```{r Demokratiezufriedenheit und Social Media-Nutzung als Nachrichtenquelle aggregieren}
social_media_aggregiert <- social_media %>% 
  group_by(altersgruppe, geschlecht, zufriedenheit_demokratie_zusammengefasst) %>% 
  summarise(socmedia = median(social_media_nachrichtenquelle)) %>% 
  drop_na()
```

```{r Demokratiezufriedenheit und Social Media-Nutzung nach Alter plotten}
ggplot(social_media_aggregiert, aes(altersgruppe, socmedia, fill = geschlecht)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_grid(cols = vars(zufriedenheit_demokratie_zusammengefasst)) + 
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
  ggtitle("Demokratiezufriedenheit und Social Media-Nutzung nach Alter und Geschlecht") + 
  xlab("Alter") + ylab("Nutzung von Social Media als Nachrichtenquelle")
```

Sie können Ihr einfaches Diagramm mit Hilfe zusätzlicher Komponenten verfeinern, indem Sie sie dem Diagramm hinzufügen (für ein sehr einfaches "Vokabular" von ggplot2 besuchen Sie diesen Link --\> (https://ggplot2.tidyverse.org/reference/).

Als nächstes schauen wir die Zustimmung zu der Aussafe an, dass der globale Klimawandel größtenteils oder vollständig durch den Menschen verursacht wird.

```{r}
vertrauen_summiert <- sample_gross %>% 
  rowwise() %>% 
  mutate(vertrauen_gesamt = sum(across(starts_with("vertrauen_")))) %>% 
  select(alter, geschlecht, entwicklung_kriminalitaet, vertrauen_gesamt) %>% 
  ungroup() %>% 
  drop_na()
```

```{r}
ggplot(vertrauen_summiert, aes(entwicklung_kriminalitaet, vertrauen_gesamt)) +
  geom_boxplot() + geom_jitter(alpha = 0.3) + 
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
  ggtitle("Kriminalitätseinschätzung und Vertrauen in gesellschaftliche Institutionen") + 
  xlab("Kriminalitätseinschätzung") + ylab("Vertrauen in gesellschaftliche Institutionen")

#ggsave("Kriminalität_und_Vertrauen.pdf")
```
